                00001 ;; z80asm.exe Basic.asm -cim
                00002 ;; python3 conv.py Basic.cim > Basic.c
                00003 ; zmac Basic.asm  --od Basic --oo cim,lst -c -s -g
                00004 ; python3 conv.py Basic/Basic.cim > Basic.c 
                00005 ;
                00006 ;*************************************************************
                00007 ;
                00008 ;                 TINY BASIC FOR ZILOG Z80
                00009 ;                       VERSION 2.0
                00010 ;                     BY LI-CHEN WANG
                00011 ;
                00012 ;                  MODIFIED AND TRANSLATED
                00013 ;                    TO INTEL MNEMONICS
                00014 ;                     BY ROGER RAUSKOLB
                00015 ;                      10 OCTOBER,1976
                00016 ;
                00017 ;                  MODIFIED AND TRANSLATED
                00018 ;                    TO ZILOG MNEMONICS
                00019 ;                      BY DOUG GABBARD
                00020 ;            www.retrodepot.net
                00021 ;
                00022 ;           RELEASED TO THE PUBLIC
                00023 ;                      10 OCTOBER,2017
                00024 ;                  YEAH, 41 YEARS LATER....
                00025 ;
                00026 ;                         @COPYLEFT
                00027 ;                   ALL WRONGS RESERVED
                00028 ;
                00029 ;*************************************************************
                00030 ; This code is derived from the original 8080 Tiny Basic.
                00031 ; It was first compiled in 8080 Mnemonics, then disassembled
                00032 ; into Zilog Mnemonics.  And then checked against the original
                00033 ; to ensure accuracy.  It was then partially enhanced with z80
                00034 ; specific code. And once done, it was then modified to work
                00035 ; with the G80-S Micro Computer. However, that portion of the
                00036 ; code has been left out in order to make this code a little
                00037 ; more portable.  There are only three routines that one needs
                00038 ; to write, and specifing the serial port's I/O address, in
                00039 ; order to make this version work with your own DIY computer.
                00040 ; Those routines can be found at the end of the source code.
                00041 ;
                00042 ; I hope you find good use for this relic. However, I would
                00043 ; ask that if you do find use for it, please put a reference
                00044 ; to me in your work. And please, distribute freely.
                00045 ;*************************************************************
                00046 ; Notes for JTFrame version:
                00047 ;  Adapted to work with GNU z80asm
                00048 ;  Added interrupt handling
                00049 
    = 0001      00050 SerialPort:     EQU     01H            ; This the serial output port
    = 0002      00051 SERIAL_STATUS:  EQU     02H
                00052 
                00053 
    = 0020      00054 SPACE:          EQU     020H            ; Space
    = 0009      00055 TAB:            EQU     09H             ; HORIZONTAL TAB
    = 0003      00056 CTRLC:          EQU     03H             ; Control "C"
    = 0007      00057 CTRLG:          EQU     07H             ; Control "G"
    = 0008      00058 BKSP:           EQU     08H             ; Back space
    = 000A      00059 LF:             EQU     0AH             ; Line feed
    = 000C      00060 CS:             EQU     0CH             ; Clear screen
    = 000D      00061 CR:             EQU     0DH             ; Carriage return
    = 000F      00062 CTRLO:          EQU     0FH             ; Control "O"
    = 0011      00063 CTRLQ:          EQU     011H            ; Control "Q"
    = 0012      00064 CTRLR:          EQU     012H            ; Control "R"
    = 0013      00065 CTRLS:          EQU     013H            ; Control "S"
    = 0015      00066 CTRLU:          EQU     015H            ; Control "U"
    = 001B      00067 ESC:            EQU     01BH            ; Escape
    = 007F      00068 DEL:            EQU     07FH            ; Delete
                00069 
                00070 ; Adjust to fit RAM mapping
    = 0FFF      00071 STACK:          EQU     00FFFH          ; STACK (Last RAM address)
    = 0800      00072 OCSW:           EQU     00800H          ;SWITCH FOR OUTPUT
    = 0801      00073 CURRNT:         EQU     OCSW+1          ;POINTS FOR OUTPUT
    = 0803      00074 STKGOS:         EQU     OCSW+3          ;SAVES SP IN 'GOSUB'
    = 0805      00075 VARNXT:         EQU     OCSW+5          ;TEMP STORAGE
    = 0807      00076 STKINP:         EQU     OCSW+7          ;SAVES SP IN 'INPUT'
    = 0809      00077 LOPVAR:         EQU     OCSW+9          ;'FOR' LOOP SAVE AREA
    = 080B      00078 LOPINC:         EQU     OCSW+11         ;INCREMENT
    = 080D      00079 LOPLMT:         EQU     OCSW+13         ;LIMIT
    = 080F      00080 LOPLN:          EQU     OCSW+15         ;LINE NUMBER
    = 0811      00081 LOPPT:          EQU     OCSW+17         ;TEXT POINTER
    = 0813      00082 RANPNT:         EQU     OCSW+19         ;RANDOM NUMBER POINTER
    = 0815      00083 TXTUNF:         EQU     OCSW+21         ;->UNFILLED TEXT AREA
    = 0817      00084 TXTBGN:         EQU     OCSW+23         ;TEXT SAVE AREA BEGINS
                00085 
    = 0F00      00086 TXTEND:         EQU     00F00H          ;TEXT SAVE AREA ENDS
                00087 
                00088 
                00089 ;*************************************************************
                00090 ; *** ZERO PAGE SUBROUTINES ***
                00091 ;
                00092 ; THE Z80 INSTRUCTION SET ALLOWS FOR 8 ROUTINES IN LOW MEMORY
                00093 ; THAT MAY BE CALLED BY RST 00H, 08H, 10H, 18H, 20H, 28H, 30H,
                00094 ; AND 38H.  THIS IS A ONE BYTE INSTRUCTION, AND IS FUNCTIONALLY
                00095 ; SIMILAR TO THE THREE BYTE INSTRUCTION 'CALL XXXX'. TINY BASIC
                00096 ; WILL USE THE RST INSTRUCTION FOR THE 7 MOST FREQUENTLY USED
                00097 ; SUBROUTINES. TWO OTHER SUBROUTINES (CRLF & TSTNUM) ARE ALSO
                00098 ; IN THIS SECTION. THEY CAN BE REACHED WITH 'CALL'.
                00099 ;*************************************************************
                00100 
                00101 DWASHR: MACRO #WHERE
                00102                 
                00103                 ENDM
                00104                 
                00105 DWA:    MACRO #WHERE
                00106         DB   .HIGH.#WHERE + 128
                00107         DB   .LOW.#WHERE & 0FFH
                00108 ;        DB   (#WHERE.SHR.8) + 128
                00109 ;        DB   #WHERE & 0FFH
                00110         ENDM
                00111 
                00112         ORG  0000H
                00113 
                00114 START:
0000  31FF0F    00115         LD SP,STACK                     ;*** COLD START ***
0003  3EFF      00116         LD A,0FFH
0005  C30606    00117         JP INIT
                00118 
0008  E3        00119 RST08:  EX (SP),HL                      ;*** TSTC OR RST 08H ***
0009  EF        00120         RST 28H                         ;IGNORE BLANKS AND
000A  BE        00121         CP (HL)                         ;TEST CHARACTER
000B  C36800    00122         JP TC1                          ;REST OF THIS IS AT TC1
                00123 
                00124 CRLF:
000E  3E0D      00125         LD A,CR                         ;*** CRLF ***
                00126 
0010  F5        00127 RST10:  PUSH AF                         ;*** OUTC OR RST 10H ***
0011  3A0008    00128         LD A,(OCSW)                     ;PRINT CHARACTER ONLY
0014  B7        00129         OR A                            ;IF OCSW SWITCH IS ON
0015  C33206    00130         JP OUTC                         ;REST OF THIS AT OUTC
                00131 
0018  CD5703    00132 RST18:  CALL EXPR2                      ;*** EXPR OR RST 18H ***
001B  E5        00133         PUSH HL                         ;EVALUATE AN EXPRESSION
001C  C31303    00134         JP EXPR1                        ;REST OF IT AT EXPR1
001F  57        00135         DB 'W'
                00136 
0020  7C        00137 RST20:  LD A,H                          ;*** COMP OR RST 20H ***
0021  BA        00138         CP D                            ;COMPARE HL WITH DE
0022  C0        00139         RET NZ                          ;RETURN CORRECT C AND
0023  7D        00140         LD A,L                          ;Z FLAGS
0024  BB        00141         CP E                            ;BUT OLD A IS LOST
0025  C9        00142         RET
0026  414E      00143         DB 'AN'
                00144 
                00145 SS1:
0028  1A        00146 RST28:  LD A,(DE)                       ;*** IGNBLK/RST 28H ***
0029  FE20      00147         CP 20H                          ;IGNORE BLANKS
002B  C0        00148         RET NZ                          ;IN TEXT (WHERE DE->)
002C  13        00149         INC DE                          ;AND RETURN THE FIRST
002D  C32800    00150         JP SS1                          ;NON-BLANK CHAR. IN A
                00151 
0030  F1        00152 RST30:  POP AF                          ;*** FINISH/RST 30H ***
0031  CD8F04    00153         CALL FIN                        ;CHECK END OF COMMAND
0034  C3A204    00154         JP QWHAT                        ;PRINT "WHAT?" IF WRONG
0037  47        00155         DB 'G'
                00156 
0038  EF        00157 RST38:  RST 28H                         ;*** TSTV OR RST 38H ***
0039  D640      00158         SUB 40H                         ;TEST VARIABLES
003B  D8        00159         RET C                           ;C:NOT A VARIABLE
003C  2018      00160         JR NZ,TV1                       ;NOT "@" ARRAY
003E  13        00161         INC DE                          ;IT IS THE "@" ARRAY
003F  CDF803    00162         CALL PARN                       ;@ SHOULD BE FOLLOWED
0042  29        00163         ADD HL,HL                       ;BY (EXPR) AS ITS INDEX
0043  3858      00164         JR C,QHOW                       ;IS INDEX TOO BIG?
0045  D5        00165         PUSH DE                         ;WILL IT OVERWRITE
0046  EB        00166         EX DE,HL                        ;TEXT?
0047  CD3604    00167         CALL SIZE                       ;FIND SIZE OF FREE
004A  E7        00168         RST 20H                         ;AND CHECK THAT
004B  DAD004    00169         JP C,ASORRY                     ;IF SO, SAY "SORRY"
004E  21000F    00170         LD HL,VARBGN                    ;IF NOT GET ADDRESS
0051  CD5804    00171         CALL SUBDE                      ;OF @(EXPR) AND PUT IT
0054  D1        00172         POP DE                          ;IN HL
0055  C9        00173         RET                             ;C FLAG IS CLEARED
                00174 
                00175 TV1:
0056  FE1B      00176         CP 1BH                          ;NOT @, IS IT A TO Z?
0058  3F        00177         CCF                             ;IF NOT RETURN C FLAG
0059  D8        00178         RET C
005A  13        00179         INC DE                          ;IF A THROUGH Z
005B  21000F    00180         LD HL,VARBGN                    ;COMPUTE ADDRESS OF
005E  07        00181         RLCA                            ;THAT VARIABLE
005F  85        00182         ADD A,L                         ;AND RETURN IT IN HL
0060  6F        00183         LD L,A                          ;WITH C FLAG CLEARED
0061  3E00      00184         LD A,00H
0063  8C        00185         ADC A,H
0064  67        00186         LD H,A
0065  C9        00187         RET
                00188 
                00189 NMI66:                                  ;MUST BE AT 66H
0066  ED4D      00190         RETI
                00191 
                00192 TC1:
0068  23        00193         INC HL                          ;COMPARE THE BYTE THAT
0069  2807      00194         JR Z,TC2                        ;FOLLOWS THE RST INST.
006B  C5        00195         PUSH BC                         ;WITH THE TEXT (DE->)
006C  4E        00196         LD C,(HL)                       ;IF NOT =, ADD THE 2ND
006D  0600      00197         LD B,00H                        ;BYTE THAT FOLLOWS THE
006F  09        00198         ADD HL,BC                       ;RST TO THE OLD PC
0070  C1        00199         POP BC                          ;I.E., DO A RELATIVE
0071  1B        00200         DEC DE                          ;JUMP IF NOT =
                00201 
                00202 TC2:
0072  13        00203         INC DE                          ;IF =, SKIP THOSE BYTES
0073  23        00204         INC HL                          ;AND CONTINUE
0074  E3        00205         EX (SP),HL
0075  C9        00206         RET
                00207 
                00208 TSTNUM:
0076  210000    00209         LD HL,0000H                     ;*** TSTNUM ***
0079  44        00210         LD B,H                          ;TEST IF THE TEXT IS
007A  EF        00211         RST 28H                         ;A NUMBER
                00212 
                00213 TN1:
007B  FE30      00214         CP 30H                          ;IF NOT, RETURN 0 IN
007D  D8        00215         RET C                           ;B AND HL
007E  FE3A      00216         CP 3AH                          ;IF NUMBERS, CONVERT
0080  D0        00217         RET NC                          ;TO BINARY IN HL AND
0081  3EF0      00218         LD A,0F0H                       ;SET B TO # OF DIGITS
0083  A4        00219         AND H                           ;IF H>255, THERE IS NO
0084  2017      00220         JR NZ,QHOW                      ;ROOM FOR NEXT DIGIT
0086  04        00221         INC B                           ;B COUNTS # OF DIGITS
0087  C5        00222         PUSH BC
0088  44        00223         LD B,H                          ;HL=10*HL+(NEW DIGIT)
0089  4D        00224         LD C,L
008A  29        00225         ADD HL,HL                       ;WHERE 10* IS DONE BY
008B  29        00226         ADD HL,HL                       ;SHIFT AND ADD
008C  09        00227         ADD HL,BC
008D  29        00228         ADD HL,HL
008E  1A        00229         LD A,(DE)                       ;AND (DIGIT) IS FROM
008F  13        00230         INC DE                          ;STRIPPING THE ASCII
0090  E60F      00231         AND 0FH                         ;CODE
0092  85        00232         ADD A,L
0093  6F        00233         LD L,A
0094  3E00      00234         LD A,00H
0096  8C        00235         ADC A,H
0097  67        00236         LD H,A
0098  C1        00237         POP BC
0099  1A        00238         LD A,(DE)                       ;DO THIS DIGIT AFTER
009A  F27B00    00239         JP P,TN1                        ;DIGIT. S SAYS OVERFLOW
                00240 
                00241 QHOW:
009D  D5        00242         PUSH DE                         ;*** ERROR "HOW?" ***
                00243 AHOW:
009E  11A400    00244         LD DE,HOW
00A1  C3A604    00245         JP ERROR_ROUTINE
                00246 
                00247 
00A4  484F573F  00248 HOW:    DB "HOW?",CR
      0D                     
00A9  4F4B0D    00249 OK:     DB "OK",CR
00AC  57484154  00250 WHAT:   DB "WHAT?",CR
      3F 0D                  
00B2  534F5252  00251 SORRY:  DB "SORRY",CR
      59 0D                  
                00252 
                00253 ;*************************************************************
                00254 ;
                00255 ; *** MAIN ***
                00256 ;
                00257 ; THIS IS THE MAIN LOOP THAT COLLECTS THE TINY BASIC PROGRAM
                00258 ; AND STORES IT IN THE MEMORY.
                00259 ;
                00260 ; AT START, IT PRINTS OUT "(CR)OK(CR)", AND INITIALIZES THE
                00261 ; STACK AND SOME OTHER INTERNAL VARIABLES.  THEN IT PROMPTS
                00262 ; ">" AND READS A LINE.  IF THE LINE STARTS WITH A NON-ZERO
                00263 ; NUMBER, THIS NUMBER IS THE LINE NUMBER.  THE LINE NUMBER
                00264 ; (IN 16 BIT BINARY) AND THE REST OF THE LINE (INCLUDING CR)
                00265 ; IS STORED IN THE MEMORY.  IF A LINE WITH THE SAME LINE
                00266 ; NUMBER IS ALREADY THERE, IT IS REPLACED BY THE NEW ONE.  IF
                00267 ; THE REST OF THE LINE CONSISTS OF A CR ONLY, IT IS NOT STORED
                00268 ; AND ANY EXISTING LINE WITH THE SAME LINE NUMBER IS DELETED.
                00269 ;
                00270 ; AFTER A LINE IS INSERTED, REPLACED, OR DELETED, THE PROGRAM
                00271 ; LOOPS BACK AND ASKS FOR ANOTHER LINE.  THIS LOOP WILL BE
                00272 ; TERMINATED WHEN IT READS A LINE WITH ZERO OR NO LINE
                00273 ; NUMBER; AND CONTROL IS TRANSFERED TO "DIRECT".
                00274 ;
                00275 ; TINY BASIC PROGRAM SAVE AREA STARTS AT THE MEMORY LOCATION
                00276 ; LABELED "TXTBGN" AND ENDS AT "TXTEND".  WE ALWAYS FILL THIS
                00277 ; AREA STARTING AT "TXTBGN", THE UNFILLED PORTION IS POINTED
                00278 ; BY THE CONTENT OF A MEMORY LOCATION LABELED "TXTUNF".
                00279 ;
                00280 ; THE MEMORY LOCATION "CURRNT" POINTS TO THE LINE NUMBER
                00281 ; THAT IS CURRENTLY BEING INTERPRETED.  WHILE WE ARE IN
                00282 ; THIS LOOP OR WHILE WE ARE INTERPRETING A DIRECT COMMAND
                00283 ; (SEE NEXT SECTION). "CURRNT" SHOULD POINT TO A 0.
                00284 ;*************************************************************
                00285 
                00286 RSTART:
00B8  31FF0F    00287         LD SP,STACK
                00288 
                00289 ST1:
00BB  CD0E00    00290         CALL CRLF                       ;AND JUMP TO HERE
00BE  11A900    00291         LD DE,OK                        ;DE->STRING
00C1  97        00292         SUB A                           ;A=0
00C2  CD2F05    00293         CALL PRTSTG                     ;PRINT STRING UNTIL CR
00C5  21CC00    00294         LD HL,ST2+1                     ;LITERAL 0
00C8  220108    00295         LD (CURRNT),HL                  ;CURRENT->LINE # = 0
                00296 
                00297 ST2:
00CB  210000    00298         LD HL,0000H
00CE  220908    00299         LD (LOPVAR),HL
00D1  220308    00300         LD (STKGOS),HL
                00301 
                00302 ST3:
00D4  3E3E      00303         LD A,'>'                        ;PROMPT '>' AND
00D6  CDD504    00304         CALL GETLN                      ;READ A LINE
00D9  D5        00305         PUSH DE                         ;DE->END OF LINE
00DA  11370F    00306         LD DE,BUFFER                    ;DE->BEGINNING OF LINE
00DD  CD7600    00307         CALL TSTNUM                     ;TEST IF IT IS A NUMBER
00E0  EF        00308         RST 28H
00E1  7C        00309         LD A,H                          ;HL=VALUE OF THE # OR
00E2  B5        00310         OR L                            ;0 IF NO # WAS FOUND
00E3  C1        00311         POP BC                          ;BC->END OF LINE
00E4  CA3307    00312         JP Z,DIRECT
00E7  1B        00313         DEC DE                          ;BACKUP DE AND SAVE
00E8  7C        00314         LD A,H                          ;VALUE OF LINE # THERE
00E9  12        00315         LD (DE),A
00EA  1B        00316         DEC DE
00EB  7D        00317         LD A,L
00EC  12        00318         LD (DE),A
00ED  C5        00319         PUSH BC                         ;BC,DE->BEGIN, END
00EE  D5        00320         PUSH DE
00EF  79        00321         LD A,C
00F0  93        00322         SUB E
                00323 
00F1  F5        00324         PUSH AF                         ;A=# OF BYTES IN LINE
00F2  CD0A05    00325         CALL FNDLN                      ;FIND THIS LINE IN SAVE
00F5  D5        00326         PUSH DE                         ;AREA, DE->SAVE AREA
00F6  2010      00327         JR NZ,ST4                       ;NZ:NOT FOUND, INSERT
00F8  D5        00328         PUSH DE                         ;Z:FOUND, DELETE IT
00F9  CD2505    00329         CALL FNDNXT                     ;FIND NEXT LINE
                00330                                         ;DE->NEXT LINE
00FC  C1        00331         POP BC                          ;BC->LINE TO BE DELETED
00FD  2A1508    00332         LD HL,(TXTUNF)                  ;HL->UNFILLED SAVE AREA
0100  CDAD05    00333         CALL MVUP                       ;MOVE UP TO DELETE
0103  60        00334         LD H,B                          ;TXTUNF->UNFILLED ARA
0104  69        00335         LD L,C
0105  221508    00336         LD (TXTUNF),HL                  ;UPDATE
                00337 
                00338 ST4:
0108  C1        00339         POP BC                          ;GET READY TO INSERT
0109  2A1508    00340         LD HL,(TXTUNF)                  ;BUT FIRST CHECK IF
010C  F1        00341         POP AF                          ;THE LENGTH OF NEW LINE
010D  E5        00342         PUSH HL                         ;IS 3 (LINE # AND CR)
010E  FE03      00343         CP 03H                          ;THEN DO NOT INSERT
0110  28A6      00344         JR Z,RSTART                     ;MUST CLEAR THE STACK
0112  85        00345         ADD A,L                         ;COMPUTE NEW TXTUNF
0113  6F        00346         LD L,A
0114  3E00      00347         LD A,00H
0116  8C        00348         ADC A,H
0117  67        00349         LD H,A                          ;HL->NEW UNFILLED AREA
0118  11000F    00350         LD DE,TXTEND                    ;CHECK TO SEE IF THERE
011B  E7        00351         RST 20H                         ;IS ENOUGH SPACE
011C  D2CF04    00352         JP NC,QSORRY                    ;SORRY, NO ROOM FOR IT
011F  221508    00353         LD (TXTUNF),HL                  ;OK, UPDATE TXTUNF
0122  D1        00354         POP DE                          ;DE->OLD UNFILLED AREA
0123  CDB505    00355         CALL MVDOWN
0126  D1        00356         POP DE                          ;DE->BEGIN, HL->END
0127  E1        00357         POP HL
0128  CDAD05    00358         CALL MVUP                       ;MOVE NEW LINE TO SAVE
012B  18A7      00359         JR ST3                          ;AREA
                00360 
                00361 ;*************************************************************
                00362 ;
                00363 ; WHAT FOLLOWS IS THE CODE TO EXECUTE DIRECT AND STATEMENT
                00364 ; COMMANDS.  CONTROL IS TRANSFERED TO THESE POINTS VIA THE
                00365 ; COMMAND TABLE LOOKUP CODE OF 'DIRECT' AND 'EXEC' IN LAST
                00366 ; SECTION.  AFTER THE COMMAND IS EXECUTED, CONTROL IS
                00367 ; TRANSFERED TO OTHERS SECTIONS AS FOLLOWS:
                00368 ;
                00369 ; FOR 'LIST', 'NEW', AND 'STOP': GO BACK TO 'RSTART'
                00370 ; FOR 'RUN': GO EXECUTE THE FIRST STORED LINE IF ANY, ELSE
                00371 ; GO BACK TO 'RSTART'.
                00372 ; FOR 'GOTO' AND 'GOSUB': GO EXECUTE THE TARGET LINE.
                00373 ; FOR 'RETURN' AND 'NEXT': GO BACK TO SAVED RETURN LINE.
                00374 ; FOR ALL OTHERS: IF 'CURRENT' -> 0, GO TO 'RSTART', ELSE
                00375 ; GO EXECUTE NEXT COMMAND.  (THIS IS DONE IN 'FINISH'.)
                00376 ;*************************************************************
                00377 ;
                00378 ; *** NEW *** STOP *** RUN (& FRIENDS) *** & GOTO ***
                00379 ;
                00380 ; 'NEW(CR)' SETS 'TXTUNF' TO POINT TO 'TXTBGN'
                00381 ;
                00382 ; 'STOP(CR)' GOES BACK TO 'RSTART'
                00383 ;
                00384 ; 'RUN(CR)' FINDS THE FIRST STORED LINE, STORE ITS ADDRESS (IN
                00385 ; 'CURRENT'), AND START EXECUTE IT.  NOTE THAT ONLY THOSE
                00386 ; COMMANDS IN TAB2 ARE LEGAL FOR STORED PROGRAM.
                00387 ;
                00388 ; THERE ARE 3 MORE ENTRIES IN 'RUN':
                00389 ; 'RUNNXL' FINDS NEXT LINE, STORES ITS ADDR. AND EXECUTES IT.
                00390 ; 'RUNTSL' STORES THE ADDRESS OF THIS LINE AND EXECUTES IT.
                00391 ; 'RUNSML' CONTINUES THE EXECUTION ON SAME LINE.
                00392 ;
                00393 ; 'GOTO EXPR(CR)' EVALUATES THE EXPRESSION, FIND THE TARGET
                00394 ; LINE, AND JUMP TO 'RUNTSL' TO DO IT.
                00395 ;*************************************************************
                00396 
                00397 NEW:
012D  CD9E04    00398         CALL ENDCHK                     ;*** NEW(CR) ***
0130  211708    00399         LD HL,TXTBGN
0133  221508    00400         LD (TXTUNF),HL
                00401 STOP:
0136  CD9E04    00402         CALL ENDCHK                     ;*** STOP(CR) ***
0139  C3B800    00403         JP RSTART
                00404 RUN:
013C  CD9E04    00405         CALL ENDCHK                     ;*** RUN(CR) ***
013F  111708    00406         LD DE,TXTBGN                    ;FIRST SAVED LINE
                00407 RUNNXL:
0142  210000    00408         LD HL,00H                       ;*** RUNNXL ***
0145  CD1205    00409         CALL FNDLP                      ;FIND WHATEVER LINE #
0148  DAB800    00410         JP C,RSTART                     ;C:PASSED TXTUNF, QUIT
                00411 RUNTSL:
014B  EB        00412         EX DE,HL                        ;*** RUNTSL ***
014C  220108    00413         LD (CURRNT),HL                  ;SET 'CURRENT'->LINE #
014F  EB        00414         EX DE,HL
0150  13        00415         INC DE                          ;BUMP PASS LINE #
0151  13        00416         INC DE
                00417 RUNSML:
0152  CD4506    00418         CALL CHKIO                      ;*** RUNSML ***
0155  21B806    00419         LD HL,TAB2-1                    ;FIND COMMAND IN TAB2
0158  C33607    00420         JP EXEC                         ;AND EXECUTE IT
                00421 GOTO:
015B  DF        00422         RST 18H                         ;*** GOTO EXPR ***
015C  D5        00423         PUSH DE                         ;SAVE FOR ERROR ROUTINE
015D  CD9E04    00424         CALL ENDCHK                     ;MUST FIND A CR
0160  CD0A05    00425         CALL FNDLN                      ;FIND THE TARGET LINE
0163  C29E00    00426         JP NZ,AHOW                      ;NO SUCH LINE #
0166  F1        00427         POP AF                          ;CLEAR THE PUSH DE
0167  18E2      00428         JR RUNTSL                       ;GO DO IT
                00429 
                00430 ;*************************************************************
                00431 ;
                00432 ; *** LIST *** & PRINT ***
                00433 ;
                00434 ; LIST HAS TWO FORMS:
                00435 ; 'LIST(CR)' LISTS ALL SAVED LINES
                00436 ; 'LIST #(CR)' START LIST AT THIS LINE #
                00437 ; YOU CAN STOP THE LISTING BY CONTROL C KEY
                00438 ;
                00439 ; PRINT COMMAND IS 'PRINT ....;' OR 'PRINT ....(CR)'
                00440 ; WHERE '....' IS A LIST OF EXPRESIONS, FORMATS, BACK-
                00441 ; ARROWS, AND STRINGS.  THESE ITEMS ARE SEPERATED BY COMMAS.
                00442 ;
                00443 ; A FORMAT IS A POUND SIGN FOLLOWED BY A NUMBER.  IT CONTROLS
                00444 ; THE NUMBER OF SPACES THE VALUE OF A EXPRESION IS GOING TO
                00445 ; BE PRINTED.  IT STAYS EFFECTIVE FOR THE REST OF THE PRINT
                00446 ; COMMAND UNLESS CHANGED BY ANOTHER FORMAT.  IF NO FORMAT IS
                00447 ; SPECIFIED, 6 POSITIONS WILL BE USED.
                00448 ;
                00449 ; A STRING IS QUOTED IN A PAIR OF SINGLE QUOTES OR A PAIR OF
                00450 ; DOUBLE QUOTES.
                00451 ;
                00452 ; A BACK-ARROW MEANS GENERATE A (CR) WITHOUT (LF)
                00453 ;
                00454 ; A (CRLF) IS GENERATED AFTER THE ENTIRE LIST HAS BEEN
                00455 ; PRINTED OR IF THE LIST IS A NULL LIST.  HOWEVER IF THE LIST
                00456 ; ENDED WITH A COMMA, NO (CRLF) IS GENERATED.
                00457 ;*************************************************************
                00458 
                00459 LIST:
0169  CD7600    00460         CALL TSTNUM                     ;TEST IF THERE IS A #
016C  CD9E04    00461         CALL ENDCHK                     ;IF NO # WE GET A 0
016F  CD0A05    00462         CALL FNDLN                      ;FIND THIS OR NEXT LINE
                00463 LS1:
0172  DAB800    00464         JP C,RSTART                     ;C:PASSED TXTUNF
0175  CD9A05    00465         CALL PRTLN                      ;PRINT THE LINE
0178  CD4506    00466         CALL CHKIO                      ;STOP IF HIT CONTROL-C
017B  CD1205    00467         CALL FNDLP                      ;FIND NEXT LINE
017E  18F2      00468         JR LS1                          ;AND LOOP BACK
                00469 PRINT:
0180  0E06      00470         LD C,06H                        ;C = # OF SPACES
0182  CF        00471         RST 08H                         ;F NULL LIST & ";"
0183  3B        00472         DB 3BH
0184  05        00473         DB PR2-$-1
0185  CD0E00    00474         CALL CRLF                       ;GIVE CR-LF AND
0188  18C8      00475         JR RUNSML                       ;CONTINUE SAME LINE
                00476 PR2:
018A  CF        00477         RST 08H                         ;IF NULL LIST (CR)
018B  0D        00478         DB CR
018C  05        00479         DB PR0-$-1
018D  CD0E00    00480         CALL CRLF                       ;ALSO GIVE CR-LF AND
0190  18B0      00481         JR RUNNXL                       ;GO TO NEXT LINE
                00482 PR0:
0192  CF        00483         RST 08H                         ;ELSE IS IT FORMAT?
0193  23        00484         DB '#'
0194  04        00485         DB PR1-$-1
0195  DF        00486         RST 18H                         ;YES, EVALUATE EXPR.
0196  4D        00487         LD C,L                          ;AND SAVE IT IN C
0197  1805      00488         JR PR3                          ;LOOK FOR MORE TO PRINT
                00489 PR1:
0199  CD3A05    00490         CALL QTSTG                      ;OR IS IT A STRING?
019C  180C      00491         JR PR8                          ;IF NOT, MUST BE EXPR.
                00492 PR3:
019E  CF        00493         RST 08H                         ;IF ",", GO FIND NEXT
019F  2C        00494         DB ','
01A0  05        00495         DB PR6-$-1
01A1  CD8F04    00496         CALL FIN                        ;IN THE LIST.
01A4  18EC      00497         JR PR0                          ;LIST CONTINUES
                00498 PR6:
01A6  CD0E00    00499         CALL CRLF                       ;LIST ENDS
01A9  F7        00500         RST 30H
                00501 PR8:
01AA  DF        00502         RST 18H                         ;EVALUATE THE EXPR
01AB  C5        00503         PUSH BC
01AC  CD5E05    00504         CALL PRTNUM                     ;PRINT THE VALUE
01AF  C1        00505         POP BC
01B0  18EC      00506         JR PR3                          ;MORE TO PRINT?
                00507 
                00508 ;*************************************************************
                00509 ;
                00510 ; *** GOSUB *** & RETURN ***
                00511 ;
                00512 ; 'GOSUB EXPR;' OR 'GOSUB EXPR (CR)' IS LIKE THE 'GOTO'
                00513 ; COMMAND, EXCEPT THAT THE CURRENT TEXT POINTER, STACK POINTER
                00514 ; ETC. ARE SAVE SO THAT EXECUTION CAN BE CONTINUED AFTER THE
                00515 ; SUBROUTINE 'RETURN'.  IN ORDER THAT 'GOSUB' CAN BE NESTED
                00516 ; (AND EVEN RECURSIVE), THE SAVE AREA MUST BE STACKED.
                00517 ; THE STACK POINTER IS SAVED IN 'STKGOS', THE OLD 'STKGOS' IS
                00518 ; SAVED IN THE STACK.  IF WE ARE IN THE MAIN ROUTINE, 'STKGOS'
                00519 ; IS ZERO (THIS WAS DONE BY THE "MAIN" SECTION OF THE CODE),
                00520 ; BUT WE STILL SAVE IT AS A FLAG FOR NO FURTHER 'RETURN'S.
                00521 ;
                00522 ; 'RETURN(CR)' UNDOS EVERYTHING THAT 'GOSUB' DID, AND THUS
                00523 ; RETURN THE EXECUTION TO THE COMMAND AFTER THE MOST RECENT
                00524 ; 'GOSUB'.  IF 'STKGOS' IS ZERO, IT INDICATES THAT WE
                00525 ; NEVER HAD A 'GOSUB' AND IS THUS AN ERROR.
                00526 ;*************************************************************
                00527 
                00528 GOSUB:
01B2  CDDE05    00529         CALL PUSHA                      ;SAVE THE CURRENT "FOR"
01B5  DF        00530         RST 18H                         ;PARAMETERS
01B6  D5        00531         PUSH DE                         ;AND TEXT POINTER
01B7  CD0A05    00532         CALL FNDLN                      ;FIND THE TARGET LINE
01BA  C29E00    00533         JP NZ,AHOW                      ;NOT THERE. SAY "HOW?"
01BD  2A0108    00534         LD HL,(CURRNT)                  ;FOUND IT, SAVE OLD.
01C0  E5        00535         PUSH HL                         ;'CURRNT' OLD 'STKGOS'
01C1  2A0308    00536         LD HL,(STKGOS)
01C4  E5        00537         PUSH HL
01C5  210000    00538         LD HL,0000H                     ;AND LOAD NEW ONES
01C8  220908    00539         LD (LOPVAR),HL
01CB  39        00540         ADD HL,SP
01CC  220308    00541         LD (STKGOS),HL
01CF  C34B01    00542         JP RUNTSL                       ;THEN RUN THAT LINE
                00543 RETURN:
01D2  CD9E04    00544         CALL ENDCHK                     ;THERE MUST BE A CR
01D5  2A0308    00545         LD HL,(STKGOS)                  ;OLD STACK POINTER
01D8  7C        00546         LD A,H                          ;0 MEANS NOT EXIST
01D9  B5        00547         OR L
01DA  CAA204    00548         JP Z,QWHAT                      ;SO, WE SAY: "WHAT?"
01DD  F9        00549         LD SP,HL                        ;ELSE, RESTORE IT
01DE  E1        00550         POP HL
01DF  220308    00551         LD (STKGOS),HL                  ;AND THE OLD "STKGOS"
01E2  E1        00552         POP HL
01E3  220108    00553         LD (CURRNT),HL                  ;AND THE OLD 'CURRNT'
01E6  D1        00554         POP DE                          ;OLD TEXT POINTER
01E7  CDC305    00555         CALL POPA                       ;OLD "FOR" PARAMETERS
01EA  F7        00556         RST 30H                         ;AND WE ARE BACK HOME
                00557 
                00558 ;*************************************************************
                00559 ;
                00560 ; *** FOR *** & NEXT ***
                00561 ;
                00562 ; 'FOR' HAS TWO FORMS:
                00563 ; 'FOR VAR=EXP1 TO EXP2 STEP EXP3' AND 'FOR VAR=EXP1 TO EXP2'
                00564 ; THE SECOND FORM MEANS THE SAME THING AS THE FIRST FORM WITH
                00565 ; EXP3=1.  (I.E., WITH A STEP OF +1.)
                00566 ; TBI WILL FIND THE VARIABLE VAR, AND SET ITS VALUE TO THE
                00567 ; CURRENT VALUE OF EXP1.  IT ALSO EVALUATES EXP2 AND EXP3
                00568 ; AND SAVE ALL THESE TOGETHER WITH THE TEXT POINTER ETC. IN
                00569 ; THE 'FOR' SAVE AREA, WHICH CONSISTS OF 'LOPVAR', 'LOPINC',
                00570 ; 'LOPLMT', 'LOPLN', AND 'LOPPT'.  IF THERE IS ALREADY SOME-
                00571 ; THING IN THE SAVE AREA (THIS IS INDICATED BY A NON-ZERO
                00572 ; 'LOPVAR'), THEN THE OLD SAVE AREA IS SAVED IN THE STACK
                00573 ; BEFORE THE NEW ONE OVERWRITES IT.
                00574 ; TBI WILL THEN DIG IN THE STACK AND FIND OUT IF THIS SAME
                00575 ; VARIABLE WAS USED IN ANOTHER CURRENTLY ACTIVE 'FOR' LOOP.
                00576 ; IF THAT IS THE CASE, THEN THE OLD 'FOR' LOOP IS DEACTIVATED.
                00577 ; (PURGED FROM THE STACK..)
                00578 ;
                00579 ; 'NEXT VAR' SERVES AS THE LOGICAL (NOT NECESSARILLY PHYSICAL)
                00580 ; END OF THE 'FOR' LOOP.  THE CONTROL VARIABLE VAR. IS CHECKED
                00581 ; WITH THE 'LOPVAR'.  IF THEY ARE NOT THE SAME, TBI DIGS IN
                00582 ; THE STACK TO FIND THE RIGHT ONE AND PURGES ALL THOSE THAT
                00583 ; DID NOT MATCH.  EITHER WAY, TBI THEN ADDS THE 'STEP' TO
                00584 ; THAT VARIABLE AND CHECK THE RESULT WITH THE LIMIT.  IF IT
                00585 ; IS WITHIN THE LIMIT, CONTROL LOOPS BACK TO THE COMMAND
                00586 ; FOLLOWING THE 'FOR'.  IF OUTSIDE THE LIMIT, THE SAVE AREA
                00587 ; IS PURGED AND EXECUTION CONTINUES.
                00588 ;*************************************************************
                00589 
                00590 FOR:
01EB  CDDE05    00591         CALL PUSHA                      ;SAVE THE OLD SAVE AREA
01EE  CD7C04    00592         CALL SETVAL                     ;SET THE CONTROL VAR.
01F1  2B        00593         DEC HL                          ;HL IS ITS ADDRESS
01F2  220908    00594         LD (LOPVAR),HL                  ;SAVE THAT
01F5  210E07    00595         LD HL,TAB5-1                    ;USE 'EXEC' TO LOOK
01F8  C33607    00596         JP EXEC                         ;FOR THE WORK 'TO'
                00597 FR1:
01FB  DF        00598         RST 18H                         ;EVALUATE THE LIMITE
01FC  220D08    00599         LD (LOPLMT),HL                  ;SAVE THAT
01FF  211407    00600         LD HL,TAB6-1                    ;USE 'EXEC' TO LOOK
0202  C33607    00601         JP EXEC                         ;FOR THE WORD 'STEP'
                00602 FR2:
0205  DF        00603         RST 18H                         ;FOUND IT, GET STEP
0206  1803      00604         JR FR4
                00605 FR3:
0208  210100    00606         LD HL,0001H                     ;NOT FOUND, SET TO 1
                00607 FR4:
020B  220B08    00608         LD (LOPINC),HL                  ;SAVE THAT TOO
                00609 FR5:
020E  2A0108    00610         LD HL,(CURRNT)                  ;SAVE CURRENT LINE #
0211  220F08    00611         LD (LOPLN),HL
0214  EB        00612         EX DE,HL                        ;AND TEXT POINTER
0215  221108    00613         LD (LOPPT),HL
0218  010A00    00614         LD BC,0AH                       ;DIG INTO STACK TO
021B  2A0908    00615         LD HL,(LOPVAR)                  ;FIND 'LOPVAR'
021E  EB        00616         EX DE,HL
021F  60        00617         LD H,B
0220  68        00618         LD L,B                          ;HL=0 NOW
0221  39        00619         ADD HL,SP                       ;HERE IS THE STACK
0222  3E        00620         DB 3EH                          ;DISASSEMBLY SAID "ld a,09h"
                00621 FR7:
0223  09        00622         ADD HL,BC                       ;EACH LEVEL IS 10 DEEP - DIS = 09
0224  7E        00623         LD A,(HL)                       ;GET THAT OLD 'LOPVAR'
0225  23        00624         INC HL
0226  B6        00625         OR (HL)
0227  2818      00626         JR Z,FR8                        ;0 SAYS NO MORE IN IT
0229  7E        00627         LD A,(HL)
022A  2B        00628         DEC HL
022B  BA        00629         CP D                            ;SAME AS THIS ONE?
022C  20F5      00630         JR NZ,FR7
022E  7E        00631         LD A,(HL)                       ;THE OTHER HALF?
022F  BB        00632         CP E
0230  20F1      00633         JR NZ,FR7
0232  EB        00634         EX DE,HL                        ;YES, FOUND ONE
0233  210000    00635         LD HL,0000H
0236  39        00636         ADD HL,SP                       ;TRY TO MOVE SP
0237  44        00637         LD B,H
0238  4D        00638         LD C,L
0239  210A00    00639         LD HL,000AH
023C  19        00640         ADD HL,DE
023D  CDB505    00641         CALL MVDOWN                     ;AND PURGE 10 WORDS
0240  F9        00642         LD SP,HL                        ;IN THE STACK
                00643 FR8:
0241  2A1108    00644         LD HL,(LOPPT)                   ;JOB DONE, RESTORE DE
0244  EB        00645         EX DE,HL
0245  F7        00646         RST 30H                         ;AND CONTINUE
                00647 ;
                00648 NEXT:
0246  FF        00649         RST 38H                         ;GET ADDRESS OF VAR.
0247  DAA204    00650         JP C,QWHAT                      ;NO VARIABLE, "WHAT?"
024A  220508    00651         LD (VARNXT),HL                  ;YES, SAVE IT
                00652 NX0:
024D  D5        00653         PUSH DE                         ;SAVE TEXT POINTER
024E  EB        00654         EX DE,HL
024F  2A0908    00655         LD HL,(LOPVAR)                  ;GET VAR. IN 'FOR'
0252  7C        00656         LD A,H
0253  B5        00657         OR L                            ;0 SAYS NEVER HAD ONE
0254  CAA304    00658         JP Z,AWHAT                      ;SO WE ASK: "WHAT?"
0257  E7        00659         RST 20H                         ;ELSE WE CHECK THEM
0258  2809      00660         JR Z,NX3                        ;OK, THEY AGREE
025A  D1        00661         POP DE                          ;NO, LET'S SEE
025B  CDC305    00662         CALL POPA                       ;PURGE CURRENT LOOP
025E  2A0508    00663         LD HL,(VARNXT)                  ;AND POP ONE LEVEL
0261  18EA      00664         JR NX0                          ;GO CHECK AGAIN
                00665 NX3:
0263  5E        00666         LD E,(HL)                       ;COME HERE WHEN AGREED
0264  23        00667         INC HL
0265  56        00668         LD D,(HL)                       ;DE=VALUE OF VAR.
0266  2A0B08    00669         LD HL,(LOPINC)
0269  E5        00670         PUSH HL
026A  7C        00671         LD A,H
026B  AA        00672         XOR D
026C  7A        00673         LD A,D
026D  19        00674         ADD HL,DE                       ;ADD ONE STEP
026E  FA7502    00675         JP M,NX4
0271  AC        00676         XOR H
0272  FA9602    00677         JP M,NX5
                00678 NX4:
0275  EB        00679         EX DE,HL
0276  2A0908    00680         LD HL,(LOPVAR)                  ;PUT IT BACK
0279  73        00681         LD (HL),E
027A  23        00682         INC HL
027B  72        00683         LD (HL),D
027C  2A0D08    00684         LD HL,(LOPLMT)                  ;HL->LIMIT
027F  F1        00685         POP AF                          ;OLD HL
0280  B7        00686         OR A
0281  F28502    00687         JP P,NX1                        ;STEP > 0
0284  EB        00688         EX DE,HL                        ;STEP < 0
                00689 NX1:
0285  CD7404    00690         CALL CKHLDE                     ;COMPARE WITH LIMIT
0288  D1        00691         POP DE                          ;RESTORE TEXT POINTER
0289  380D      00692         JR C,NX2                        ;OUTSIDE LIMIT
028B  2A0F08    00693         LD HL,(LOPLN)                   ;WITHIN LIMIT, GO
028E  220108    00694         LD (CURRNT),HL                  ;BACK TO THE SAVED
0291  2A1108    00695         LD HL,(LOPPT)                   ;'CURRNT' AND TEXT
0294  EB        00696         EX DE,HL                        ;POINTER
0295  F7        00697         RST 30H
                00698 NX5:
0296  E1        00699         POP HL
0297  D1        00700         POP DE
                00701 NX2:
0298  CDC305    00702         CALL POPA                       ;PURGE THIS LOOP
029B  F7        00703         RST 30H
                00704 
                00705 ;*************************************************************
                00706 ;
                00707 ; *** REM *** IF *** INPUT *** & LET (& DEFLT) ***
                00708 ;
                00709 ; 'REM' CAN BE FOLLOWED BY ANYTHING AND IS IGNORED BY TBI.
                00710 ; TBI TREATS IT LIKE AN 'IF' WITH A FALSE CONDITION.
                00711 ;
                00712 ; 'IF' IS FOLLOWED BY AN EXPR. AS A CONDITION AND ONE OR MORE
                00713 ; COMMANDS (INCLUDING OTHER 'IF'S) SEPERATED BY SEMI-COLONS.
                00714 ; NOTE THAT THE WORD 'THEN' IS NOT USED.  TBI EVALUATES THE
                00715 ; EXPR. IF IT IS NON-ZERO, EXECUTION CONTINUES.  IF THE
                00716 ; EXPR. IS ZERO, THE COMMANDS THAT FOLLOWS ARE IGNORED AND
                00717 ; EXECUTION CONTINUES AT THE NEXT LINE.
                00718 ;
                00719 ; 'INPUT' COMMAND IS LIKE THE 'PRINT' COMMAND, AND IS FOLLOWED
                00720 ; BY A LIST OF ITEMS.  IF THE ITEM IS A STRING IN SINGLE OR
                00721 ; DOUBLE QUOTES, OR IS A BACK-ARROW, IT HAS THE SAME EFFECT AS
                00722 ; IN 'PRINT'.  IF AN ITEM IS A VARIABLE, THIS VARIABLE NAME IS
                00723 ; PRINTED OUT FOLLOWED BY A COLON.  THEN TBI WAITS FOR AN
                00724 ; EXPR. TO BE TYPED IN.  THE VARIABLE IS THEN SET TO THE
                00725 ; VALUE OF THIS EXPR.  IF THE VARIABLE IS PROCEDED BY A STRING
                00726 ; (AGAIN IN SINGLE OR DOUBLE QUOTES), THE STRING WILL BE
                00727 ; PRINTED FOLLOWED BY A COLON.  TBI THEN WAITS FOR INPUT EXPR.
                00728 ; AND SET THE VARIABLE TO THE VALUE OF THE EXPR.
                00729 ;
                00730 ; IF THE INPUT EXPR. IS INVALID, TBI WILL PRINT "WHAT?",
                00731 ; "HOW?" OR "SORRY" AND REPRINT THE PROMPT AND REDO THE INPUT.
                00732 ; THE EXECUTION WILL NOT TERMINATE UNLESS YOU TYPE CONTROL-C.
                00733 ; THIS IS HANDLED IN 'INPERR'.
                00734 ;
                00735 ; 'LET' IS FOLLOWED BY A LIST OF ITEMS SEPERATED BY COMMAS.
                00736 ; EACH ITEM CONSISTS OF A VARIABLE, AN EQUAL SIGN, AND AN EXPR.
                00737 ; TBI EVALUATES THE EXPR. AND SET THE VARIABLE TO THAT VALUE.
                00738 ; TBI WILL ALSO HANDLE 'LET' COMMAND WITHOUT THE WORD 'LET'.
                00739 ; THIS IS DONE BY 'DEFLT'.
                00740 ;*************************************************************
                00741 
                00742 REM:
029C  210000    00743         LD HL,0000H                     ;*** REM ***
029F  3E        00744         DB 3EH                          ;THIS IS LIKE 'IF 0'
                00745 IFF:
02A0  DF        00746         RST 18H                         ;*** IF ***
02A1  7C        00747         LD A,H                          ;IS THE EXPR.=0?
02A2  B5        00748         OR L
02A3  C25201    00749         JP NZ,RUNSML                    ;NO, CONTINUE
02A6  CD2705    00750         CALL FNDSKP                     ;YES, SKIP REST OF LINE
02A9  D24B01    00751         JP NC,RUNTSL                    ;AND RUN THE NEXT LINE
02AC  C3B800    00752         JP RSTART                       ;IF NO NEXT, RE-START
                00753 INPERR:
02AF  2A0708    00754         LD HL,(STKINP)                  ;*** INPERR ***
02B2  F9        00755         LD SP,HL                        ;RESTORE OLD SP
02B3  E1        00756         POP HL                          ;AND OLD 'CURRNT'
02B4  220108    00757         LD (CURRNT),HL
02B7  D1        00758         POP DE                          ;AND OLD TEXT POINTER
02B8  D1        00759         POP DE                          ;REDO INPUT
                00760 INPUT:                                  ;*** INPUT ***
                00761 IP1:
02B9  D5        00762         PUSH DE                         ;SAVE IN CASE OF ERROR
02BA  CD3A05    00763         CALL QTSTG                      ;IS NEXT ITEM A STRING?
02BD  1805      00764         JR IP2                          ;NO
02BF  FF        00765         RST 38H                         ;YES, BUT FOLLOWED BY A
02C0  383C      00766         JR C,IP4                        ;VARIABLE? NO.
02C2  1810      00767         JR IP3                          ;YES. INPUT VARIABLE
                00768 IP2:
02C4  D5        00769         PUSH DE                         ;SAVE FOR 'PRTSTG'
02C5  FF        00770         RST 38H                         ;MUST BE VARIABLE NOW
02C6  DAA204    00771         JP C,QWHAT                      ;"WHAT?" IT IS NOT?
02C9  1A        00772         LD A,(DE)                       ;GET READY FOR 'PRTSTR'
02CA  4F        00773         LD C,A
02CB  97        00774         SUB A
02CC  12        00775         LD (DE),A
02CD  D1        00776         POP DE
02CE  CD2F05    00777         CALL PRTSTG                     ;PRINT STRING AS PROMPT
02D1  79        00778         LD A,C                          ;RESTORE TEXT
02D2  1B        00779         DEC DE
02D3  12        00780         LD (DE),A
                00781 IP3:
02D4  D5        00782         PUSH DE                         ;SAVE TEXT POINTER
02D5  EB        00783         EX DE,HL
02D6  2A0108    00784         LD HL,(CURRNT)                  ;ALSO SAVE 'CURRNT'
02D9  E5        00785         PUSH HL
02DA  21B902    00786         LD HL,IP1                       ;A NEGATIVE NUMBER
02DD  220108    00787         LD (CURRNT),HL                  ;AS A FLAG
02E0  210000    00788         LD HL,0000H                     ;SAVE SP TOO
02E3  39        00789         ADD HL,SP
02E4  220708    00790         LD (STKINP),HL
02E7  D5        00791         PUSH DE                         ;OLD HL
02E8  3E3A      00792         LD A,3AH                        ;PRINT THIS TOO
02EA  CDD504    00793         CALL GETLN                      ;AND GET A LINE
02ED  11370F    00794         LD DE,BUFFER                    ;POINTS TO BUFFER
02F0  DF        00795         RST 18H                         ;EVALUATE INPUT
02F1  00        00796         NOP                             ;CAN BE 'CALL ENDCHK'
02F2  00        00797         NOP
02F3  00        00798         NOP
02F4  D1        00799         POP DE                          ;OK,GET OLD HL
02F5  EB        00800         EX DE,HL
02F6  73        00801         LD (HL),E                       ;SAVE VALUE IN VAR.
02F7  23        00802         INC HL
02F8  72        00803         LD (HL),D
02F9  E1        00804         POP HL                          ;GET OLD 'CURRNT'
02FA  220108    00805         LD (CURRNT),HL
02FD  D1        00806         POP DE                          ;AND OLD TEXT POINTER
                00807 IP4:
02FE  F1        00808         POP AF                          ;PURGE JUNK IN STACK
02FF  CF        00809         RST 08H                         ;IS NEXT CH. ','?
0300  2C        00810         DB ','
0301  02        00811         DB IP5-$-1
0302  18B5      00812         JR IP1                          ;YES, MORE ITEMS.
                00813 IP5:
0304  F7        00814         RST 30H
                00815 DEFLT:
0305  1A        00816         LD A,(DE)                       ;***  DEFLT ***
0306  FE0D      00817         CP CR                           ;EMPTY LINE IS OK
0308  2808      00818         JR Z,LT1                        ;ELSE IT IS 'LET'
                00819 LET:
030A  CD7C04    00820         CALL SETVAL                     ;*** LET ***
030D  CF        00821         RST 08H                         ;SET VALUE TO VAR
030E  2C        00822         DB ','                          ;---DISASSEMBLE = INC L
030F  02        00823         DB LT1-$-1                      ;---DISASSEMBLE = INC BC
0310  18F8      00824         JR LET                          ;ITEM BY ITEM
                00825 LT1:
0312  F7        00826         RST 30H                         ;UNTIL FINISH
                00827 ;*************************************************************
                00828 ;
                00829 ; *** EXPR ***
                00830 ;
                00831 ; 'EXPR' EVALUATES ARITHMETICAL OR LOGICAL EXPRESSIONS.
                00832 ; <EXPR>::<EXPR2>
                00833 ;         <EXPR2><REL.OP.><EXPR2>
                00834 ; WHERE <REL.OP.> IS ONE OF THE OPERATORS IN TAB8 AND THE
                00835 ; RESULT OF THESE OPERATIONS IS 1 IF TRUE AND 0 IF FALSE.
                00836 ; <EXPR2>::=(+ OR -)<EXPR3>(+ OR -<EXPR3>)(....)
                00837 ; WHERE () ARE OPTIONAL AND (....) ARE OPTIONAL REPEATS.
                00838 ; <EXPR3>::=<EXPR4>(* OR /><EXPR4>)(....)
                00839 ; <EXPR4>::=<VARIABLE>
                00840 ;           <FUNCTION>
                00841 ;           (<EXPR>)
                00842 ; <EXPR> IS RECURSIVE SO THAT VARIABLE '@' CAN HAVE AN <EXPR>
                00843 ; AS INDEX, FUNCTIONS CAN HAVE AN <EXPR> AS ARGUMENTS, AND
                00844 ; <EXPR4> CAN BE AN <EXPR> IN PARANTHESE.
                00845 ;*************************************************************
                00846 
                00847 EXPR1:
0313  211C07    00848         LD HL,TAB8-1                    ;LOOKUP REL.OP.
0316  C33607    00849         JP EXEC                         ;GO DO IT
                00850 XP11:
0319  CD4203    00851         CALL XP18                       ;REL.OP.">="
031C  D8        00852         RET C                           ;NO, RETURN HL=0
031D  6F        00853         LD L,A                          ;YES, RETURN HL=1
031E  C9        00854         RET
                00855 XP12:
031F  CD4203    00856         CALL XP18                       ;REL.OP."#"
0322  C8        00857         RET Z                           ;FALSE, RETURN HL=0
0323  6F        00858         LD L,A                          ;TRUE, RETURN HL=1
0324  C9        00859         RET
                00860 XP13:
0325  CD4203    00861         CALL XP18                       ;REL.OP.">"
0328  C8        00862         RET Z                           ;FALSE
0329  D8        00863         RET C                           ;ALSO FALSE, HL=0
032A  6F        00864         LD L,A                          ;TRUE, HL=1
032B  C9        00865         RET
                00866 XP14:
032C  CD4203    00867         CALL XP18                       ;REL.OP."<="
032F  6F        00868         LD L,A                          ;SET HL=1
0330  C8        00869         RET Z                           ;REL. TRUE, RETURN
0331  D8        00870         RET C
0332  6C        00871         LD L,H                          ;ELSE SET HL=0
0333  C9        00872         RET
                00873 XP15:
0334  CD4203    00874         CALL XP18                       ;REL.OP."="
0337  C0        00875         RET NZ                          ;FALSE, RETURN HL=0
0338  6F        00876         LD L,A                          ;ELSE SET HL=1
0339  C9        00877         RET
                00878 XP16:
033A  CD4203    00879         CALL XP18                       ;REL.OP."<"
033D  D0        00880         RET NC                          ;FALSE, RETURN HL=0
033E  6F        00881         LD L,A                          ;ELSE SET HL=1
033F  C9        00882         RET
                00883 XP17:
0340  E1        00884         POP HL                          ;NOT .REL.OP
0341  C9        00885         RET                             ;RETURN HL=<EXPR2>
                00886 XP18:
0342  79        00887         LD A,C                          ;SUBROUTINE FOR ALL
0343  E1        00888         POP HL                          ;REL.OP.'S
0344  C1        00889         POP BC
0345  E5        00890         PUSH HL                         ;REVERSE TOP OF STACK
0346  C5        00891         PUSH BC
0347  4F        00892         LD C,A
0348  CD5703    00893         CALL EXPR2                      ;GET 2ND <EXPR2>
034B  EB        00894         EX DE,HL                        ;VALUE IN DE NOW
034C  E3        00895         EX (SP),HL                      ;1ST <EXPR2> IN HL
034D  CD7404    00896         CALL CKHLDE                     ;COMPARE 1ST WITH 2ND
0350  D1        00897         POP DE                          ;RESTORE TEXT POINTER
0351  210000    00898         LD HL,0000H                     ;SET HL=0, A=1
0354  3E01      00899         LD A,01H
0356  C9        00900         RET
                00901 EXPR2:
0357  CF        00902         RST 08H                         ;NEGATIVE SIGN?
0358  2D        00903         DB '-'
0359  05        00904         DB XP21-$-1
035A  210000    00905         LD HL,0000H                     ;YES, FAKE '0-'
035D  1821      00906         JR XP26                         ;TREAT LIKE SUBTRACT
                00907 XP21:
035F  CF        00908         RST 08H                         ;POSITIVE SIGN? IGNORE
0360  2B        00909         DB '+'
0361  00        00910         DB XP22-$-1
                00911 XP22:
0362  CD8903    00912         CALL EXPR3                      ;1ST <EXPR3>
                00913 XP23:
0365  CF        00914         RST 08H                         ;ADD?
0366  2B        00915         DB  '+'
0367  15        00916         DB XP25-$-1
0368  E5        00917         PUSH HL                         ;YES, SAVE VALUE
0369  CD8903    00918         CALL EXPR3                      ;GET 2ND <EXPR3>
                00919 XP24:
036C  EB        00920         EX DE,HL                        ;2ND IN DE
036D  E3        00921         EX (SP),HL                      ;1ST IN HL
036E  7C        00922         LD A,H                          ;COMPARE SIGN
036F  AA        00923         XOR D
0370  7A        00924         LD A,D
0371  19        00925         ADD HL,DE
0372  D1        00926         POP DE                          ;RESTORE TEXT POINTER
0373  FA6503    00927         JP M,XP23                       ;1ST AND 2ND SIGN DIFFER
0376  AC        00928         XOR H                           ;1ST AND 2ND SIGN EQUAL
0377  F26503    00929         JP P,XP23                       ;SO IS RESULT
037A  C39D00    00930         JP QHOW                         ;ELSE WE HAVE OVERFLOW
                00931 XP25:
037D  CF        00932         RST 08H                         ;SUBTRACT?
037E  2D        00933         DB '-'
037F  7F        00934         DB XP42-$-1
                00935 XP26:
0380  E5        00936         PUSH HL                         ;YES, SAVE 1ST <EXPR3>
0381  CD8903    00937         CALL EXPR3                      ;GET 2ND <EXPR3>
0384  CD6204    00938         CALL CHGSGN                     ;NEGATE
0387  18E3      00939         JR XP24                         ;AND ADD THEM
                00940 ;
                00941 EXPR3:
0389  CDE403    00942         CALL EXPR4                      ;GET 1ST <EXPR4>
                00943 XP31:
038C  CF        00944         RST 08H                         ;MULTIPLY?
038D  2A        00945         DB '*'
038E  29        00946         DB XP34-$-1
038F  E5        00947         PUSH HL                         ;YES, SAVE 1ST
0390  CDE403    00948         CALL EXPR4                      ;AND GET 2ND <EXPR4>
0393  0600      00949         LD B,00H                        ;CLEAR B FOR SIGN
0395  CD5F04    00950         CALL CHKSGN                     ;CHECK SIGN
0398  E3        00951         EX (SP),HL                      ;1ST IN HL
0399  CD5F04    00952         CALL CHKSGN                     ;CHECK SIGN OF 1ST
039C  EB        00953         EX DE,HL
039D  E3        00954         EX (SP),HL
039E  7C        00955         LD A,H                          ;IS HL > 255 ?
039F  B7        00956         OR A
03A0  2806      00957         JR Z,XP32                       ;NO
03A2  7A        00958         LD A,D                          ;YES, HOW ABOUT DE
03A3  B2        00959         OR D
03A4  EB        00960         EX DE,HL                        ;PUT SMALLER IN HL
03A5  C29E00    00961         JP NZ,AHOW                      ;ALSO >, WILL OVERFLOW
                00962 XP32:
03A8  7D        00963         LD A,L                          ;THIS IS DUMB
03A9  210000    00964         LD HL,0000H                     ;CLEAR RESULT
03AC  B7        00965         OR A                            ;ADD AND COUNT
03AD  2828      00966         JR Z,XP35
                00967 XP33:
03AF  19        00968         ADD HL,DE
03B0  DA9E00    00969         JP C,AHOW                       ;OVERFLOW
03B3  3D        00970         DEC A
03B4  20F9      00971         JR NZ,XP33
03B6  181F      00972         JR XP35                         ;FINISHED
                00973 XP34:
03B8  CF        00974         RST 08H                         ;DIVIDE?
03B9  2F        00975         DB '/'
03BA  44        00976         DB XP42-$-1
03BB  E5        00977         PUSH HL                         ;YES, SAVE 1ST <EXPR4>
03BC  CDE403    00978         CALL EXPR4                      ;AND GET THE SECOND ONE
03BF  0600      00979         LD B,00H                        ;CLEAR B FOR SIGN
03C1  CD5F04    00980         CALL CHKSGN                     ;CHECK SIGN OF 2ND
03C4  E3        00981         EX (SP),HL                      ;GET 1ST IN HL
03C5  CD5F04    00982         CALL CHKSGN                     ;CHECK SIGN OF 1ST
03C8  EB        00983         EX DE,HL
03C9  E3        00984         EX (SP),HL
03CA  EB        00985         EX DE,HL
03CB  7A        00986         LD A,D                          ;DIVIDE BY 0?
03CC  B3        00987         OR E
03CD  CA9E00    00988         JP Z,AHOW                       ;SAY "HOW?"
03D0  C5        00989         PUSH BC                         ;ELSE SAVE SIGN
03D1  CD4304    00990         CALL DIVIDE                     ;USE SUBROUTINE
03D4  60        00991         LD H,B                          ;RESULT IN HL NOW
03D5  69        00992         LD L,C
03D6  C1        00993         POP BC                          ;GET SIGN BACK
                00994 XP35:
03D7  D1        00995         POP DE                          ;AND TEXT POINTER
03D8  7C        00996         LD A,H                          ;HL MUST BE +
03D9  B7        00997         OR A
03DA  FA9D00    00998         JP M,QHOW                       ;ELSE IT IS OVERFLOW
03DD  78        00999         LD A,B
03DE  B7        01000         OR A
03DF  FC6204    01001         CALL M,CHGSGN                   ;CHANGE SIGN IF NEEDED
03E2  18A8      01002         JR XP31                         ;LOOK FOR MORE TERMS
                01003 EXPR4:
03E4  21FC06    01004         LD HL,TAB4-1                    ;FIND FUNCTION IN TAB4
03E7  C33607    01005         JP EXEC                         ;AND GO DO IT
                01006 XP40:
03EA  FF        01007         RST 38H                         ;NO, NOT A FUNCTION
03EB  3805      01008         JR C,XP41                       ;NOR A VARIABLE
03ED  7E        01009         LD A,(HL)                       ;VARIABLE
03EE  23        01010         INC HL
03EF  66        01011         LD H,(HL)                       ;VALUE IN HL
03F0  6F        01012         LD L,A
03F1  C9        01013         RET
                01014 XP41:
03F2  CD7600    01015         CALL TSTNUM                     ;OR IS IT A NUMBER
03F5  78        01016         LD A,B                          ;# OF DIGIT
03F6  B7        01017         OR A
03F7  C0        01018         RET NZ                          ;OK
                01019 PARN:
03F8  CF        01020         RST 08H
03F9  28        01021         DB '('
03FA  05        01022         DB XP43-$-1
03FB  DF        01023         RST 18H                         ;"(EXPR)"
03FC  CF        01024         RST 08H
03FD  29        01025         DB ')'
03FE  01        01026         DB XP43-$-1
                01027 XP42:
03FF  C9        01028         RET
                01029 XP43:
0400  C3A204    01030         JP QWHAT                        ;ELSE SAY: "WHAT?"
                01031 RND:
0403  CDF803    01032         CALL PARN                       ;*** RND(EXPR) ***
0406  7C        01033         LD A,H                          ;EXPR MUST BE +
0407  B7        01034         OR A
0408  FA9D00    01035         JP M,QHOW
040B  B5        01036         OR L                            ;AND NON-ZERO
040C  CA9D00    01037         JP Z,QHOW
040F  D5        01038         PUSH DE                         ;SAVE BOTH
0410  E5        01039         PUSH HL
0411  2A1308    01040         LD HL,(RANPNT)                  ;GET MEMORY AS RANDOM
0414  116C07    01041         LD DE,LSTROM                    ;NUMBER
0417  E7        01042         RST 20H
0418  3803      01043         JR C,RA1                        ;WRAP AROUND IF LAST
041A  210000    01044         LD HL,START
                01045 RA1:
041D  5E        01046         LD E,(HL)
041E  23        01047         INC HL
041F  56        01048         LD D,(HL)
0420  221308    01049         LD (RANPNT),HL
0423  E1        01050         POP HL
0424  EB        01051         EX DE,HL
0425  C5        01052         PUSH BC
0426  CD4304    01053         CALL DIVIDE                     ;RND (N)=MOD(M,N)+1
0429  C1        01054         POP BC
042A  D1        01055         POP DE
042B  23        01056         INC HL
042C  C9        01057         RET
                01058 ABS:
042D  CDF803    01059         CALL PARN                       ;*** ABS (EXPR) ***
0430  1B        01060         DEC DE
0431  CD5F04    01061         CALL CHKSGN                     ;CHECK SIGN
0434  13        01062         INC DE
0435  C9        01063         RET
                01064 SIZE:
0436  2A1508    01065         LD HL,(TXTUNF)                  ;*** SIZE ***
0439  D5        01066         PUSH DE                         ;GET THE NUMBER OF FREE
043A  EB        01067         EX DE,HL                        ;BYTES BETWEEN 'TXTUNF'
043B  21000F    01068         LD HL,VARBGN                    ;AND 'VARBGN'
043E  CD5804    01069         CALL SUBDE
0441  D1        01070         POP DE
0442  C9        01071         RET
                01072 ;*************************************************************
                01073 ;
                01074 ; *** DIVIDE *** SUBDE *** CHKSGN *** CHGSGN *** & CKHLDE ***
                01075 ;
                01076 ; 'DIVIDE' DIVIDES HL BY DE, RESULT IN BC, REMAINDER IN HL
                01077 ;
                01078 ; 'SUBDE' SUBSTRACTS DE FROM HL
                01079 ;
                01080 ; 'CHKSGN' CHECKS SIGN OF HL.  IF +, NO CHANGE.  IF -, CHANGE
                01081 ; SIGN AND FLIP SIGN OF B.
                01082 ;
                01083 ; 'CHGSGN' CHECKS SIGN N OF HL AND B UNCONDITIONALLY.
                01084 ;
                01085 ; 'CKHLDE' CHECKS SIGN OF HL AND DE.  IF DIFFERENT, HL AND DE
                01086 ; ARE INTERCHANGED.  IF SAME SIGN, NOT INTERCHANGED.  EITHER
                01087 ; CASE, HL DE ARE THEN COMPARED TO SET THE FLAGS.
                01088 ;*************************************************************
                01089 
                01090 DIVIDE:
0443  E5        01091         PUSH HL                         ;*** DIVIDE ***
0444  6C        01092         LD L,H                          ;DIVIDE H BY DE
0445  2600      01093         LD H,00H
0447  CD4E04    01094         CALL DV1
044A  41        01095         LD B,C                          ;SAVE RESULT IN B
044B  7D        01096         LD A,L                          ;(REMAINDER+L)/DE
044C  E1        01097         POP HL
044D  67        01098         LD H,A
                01099 DV1:
044E  0EFF      01100         LD C,0FFH                       ;RESULT IN C
                01101 DV2:
0450  0C        01102         INC C                           ;DUMB ROUTINE
0451  CD5804    01103         CALL SUBDE                      ;DIVIDE BY SUBTRACT
0454  30FA      01104         JR NC,DV2                       ;AND COUNT
0456  19        01105         ADD HL,DE
0457  C9        01106         RET
                01107 SUBDE:
0458  7D        01108         LD A,L                          ;*** SUBDE ***
0459  93        01109         SUB E                           ;SUBSTRACT DE FROM
045A  6F        01110         LD L,A                          ;HL
045B  7C        01111         LD A,H
045C  9A        01112         SBC A,D
045D  67        01113         LD H,A
045E  C9        01114         RET
                01115 CHKSGN:
045F  7C        01116         LD A,H                          ;*** CHKSGN ***
0460  B7        01117         OR A                            ;CHECK SIGN OF HL
0461  F0        01118         RET P
                01119 CHGSGN:
0462  7C        01120         LD A,H                          ;*** CHGSGN ***
0463  F5        01121         PUSH AF
0464  2F        01122         CPL                             ;CHANGE SIGN OF HL
0465  67        01123         LD H,A
0466  7D        01124         LD A,L
0467  2F        01125         CPL
0468  6F        01126         LD L,A
0469  23        01127         INC HL
046A  F1        01128         POP AF
046B  AC        01129         XOR H
046C  F29D00    01130         JP P,QHOW
046F  78        01131         LD A,B                          ;AND ALSO FLIP B
0470  EE80      01132         XOR 80H
0472  47        01133         LD B,A
0473  C9        01134         RET
                01135 CKHLDE:
0474  7C        01136         LD A,H                          ;SAME SIGN?
0475  AA        01137         XOR D                           ;YES, COMPARE
0476  F27A04    01138         JP P,CK1                        ;NO, XCHANGE AND COMP
0479  EB        01139         EX DE,HL
                01140 CK1:
047A  E7        01141         RST 20H
047B  C9        01142         RET
                01143 ;*************************************************************
                01144 ;
                01145 ; *** SETVAL *** FIN *** ENDCHK *** & ERROR (& FRIENDS) ***
                01146 ;
                01147 ; "SETVAL" EXPECTS A VARIABLE, FOLLOWED BY AN EQUAL SIGN AND
                01148 ; THEN AN EXPR.  IT EVALUATES THE EXPR. AND SET THE VARIABLE
                01149 ; TO THAT VALUE.
                01150 ;
                01151 ; "FIN" CHECKS THE END OF A COMMAND.  IF IT ENDED WITH ";",
                01152 ; EXECUTION CONTINUES.  IF IT ENDED WITH A CR, IT FINDS THE
                01153 ; NEXT LINE AND CONTINUE FROM THERE.
                01154 ;
                01155 ; "ENDCHK" CHECKS IF A COMMAND IS ENDED WITH CR.  THIS IS
                01156 ; REQUIRED IN CERTAIN COMMANDS.  (GOTO, RETURN, AND STOP ETC.)
                01157 ;
                01158 ; "ERROR" PRINTS THE STRING POINTED BY DE (AND ENDS WITH CR).
                01159 ; IT THEN PRINTS THE LINE POINTED BY 'CURRNT' WITH A "?"
                01160 ; INSERTED AT WHERE THE OLD TEXT POINTER (SHOULD BE ON TOP
                01161 ; OF THE STACK) POINTS TO.  EXECUTION OF TB IS STOPPED
                01162 ; AND TBI IS RESTARTED.  HOWEVER, IF 'CURRNT' -> ZERO
                01163 ; (INDICATING A DIRECT COMMAND), THE DIRECT COMMAND IS NOT
                01164 ; PRINTED.  AND IF 'CURRNT' -> NEGATIVE # (INDICATING 'INPUT'
                01165 ; COMMAND), THE INPUT LINE IS NOT PRINTED AND EXECUTION IS
                01166 ; NOT TERMINATED BUT CONTINUED AT 'INPERR'.
                01167 ;
                01168 ; RELATED TO 'ERROR' ARE THE FOLLOWING:
                01169 ; 'QWHAT' SAVES TEXT POINTER IN STACK AND GET MESSAGE "WHAT?"
                01170 ; 'AWHAT' JUST GET MESSAGE "WHAT?" AND JUMP TO 'ERROR'.
                01171 ; 'QSORRY' AND 'ASORRY' DO SAME KIND OF THING.
                01172 ; 'AHOW' AND 'AHOW' IN THE ZERO PAGE SECTION ALSO DO THIS.
                01173 ;*************************************************************
                01174 
                01175 SETVAL:
047C  FF        01176         RST 38H                         ;*** SETVAL ***
047D  DAA204    01177         JP C,QWHAT                      ;"WHAT?" NO VARIABLE
0480  E5        01178         PUSH HL                         ;SAVE ADDRESS OF VAR.
0481  CF        01179         RST 08H                         ;PASS "=" SIGN
0482  3D        01180         DB '='
0483  08        01181         DB SV1-$-1
0484  DF        01182         RST 18H                         ;EVALUATE EXPR.
0485  44        01183         LD B,H                          ;VALUE IS IN BC NOW
0486  4D        01184         LD C,L
0487  E1        01185         POP HL                          ;GET ADDRESS
0488  71        01186         LD (HL),C                       ;SAVE VALUE
0489  23        01187         INC HL
048A  70        01188         LD (HL),B
048B  C9        01189         RET
                01190 SV1:
048C  C3A204    01191         JP QWHAT                        ;NO "=" SIGN
                01192 FIN:
048F  CF        01193         RST 08H                         ;*** FIN ***
0490  3B        01194         DB 3BH
0491  04        01195         DB FI1-$-1
0492  F1        01196         POP AF                          ;";", PURGE RET. ADDR.
0493  C35201    01197         JP RUNSML                       ;CONTINUE SAME LINE
                01198 FI1:
0496  CF        01199         RST 08H                         ;NOT ";", IS IT CR?
0497  0D        01200         DB CR
0498  04        01201         DB FI2-$-1
0499  F1        01202         POP AF                          ;YES, PURGE RET. ADDR.
049A  C34201    01203         JP RUNNXL                       ;RUN NEXT LINE
                01204 FI2:
049D  C9        01205         RET                             ;ELSE RETURN TO CALLER
                01206 ENDCHK:
049E  EF        01207         RST 28H                         ;*** ENDCHK ***
049F  FE0D      01208         CP CR                           ;END WITH CR?
04A1  C8        01209         RET Z                           ;OK, ELSE SAY: "WHAT?"
                01210 QWHAT:
04A2  D5        01211         PUSH DE                         ;*** QWHAT ***
                01212 AWHAT:
04A3  11AC00    01213         LD DE,WHAT                      ;*** AWHAT ***
                01214 ERROR_ROUTINE:
04A6  97        01215         SUB A                           ;*** ERROR ***
04A7  CD2F05    01216         CALL PRTSTG                     ;PRINT 'WHAT?', 'HOW?'
04AA  D1        01217         POP DE                          ;OR 'SORRY'
04AB  1A        01218         LD A,(DE)                       ;SAVE THE CHARACTER
04AC  F5        01219         PUSH AF                         ;AT WHERE OLD DE ->
04AD  97        01220         SUB A                           ;AND PUT A 0 THERE
04AE  12        01221         LD (DE),A
04AF  2A0108    01222         LD HL,(CURRNT)                  ;GET CURRENT LINE #
04B2  E5        01223         PUSH HL
04B3  7E        01224         LD A,(HL)                       ;CHECK THE VALUE
04B4  23        01225         INC HL
04B5  B6        01226         OR (HL)
04B6  D1        01227         POP DE
04B7  CAB800    01228         JP Z,RSTART                     ;IF ZERO, JUST RESTART
04BA  7E        01229         LD A,(HL)                       ;IF NEGATIVE,
04BB  B7        01230         OR A
04BC  FAAF02    01231         JP M,INPERR                     ;REDO INPUT
04BF  CD9A05    01232         CALL PRTLN                      ;ELSE PRINT THE LINE
04C2  1B        01233         DEC DE                          ;UPTO WHERE THE 0 IS
04C3  F1        01234         POP AF                          ;RESTORE THE CHARACTER
04C4  12        01235         LD (DE),A
04C5  3E3F      01236         LD A,3FH                        ;PRINT A "?"
04C7  D7        01237         RST 10H
04C8  97        01238         SUB A                           ;AND THE REST OF THE
04C9  CD2F05    01239         CALL PRTSTG                     ;LINE
04CC  C3B800    01240         JP RSTART                       ;THEN RESTART
                01241 QSORRY:
04CF  D5        01242         PUSH DE                         ;*** QSORRY ***
                01243 ASORRY:
04D0  11B200    01244         LD DE,SORRY                     ;*** ASORRY ***
04D3  18D1      01245         JR ERROR_ROUTINE
                01246 ;*************************************************************
                01247 ;
                01248 ; *** GETLN *** FNDLN (& FRIENDS) ***
                01249 ;
                01250 ; 'GETLN' READS A INPUT LINE INTO 'BUFFER'.  IT FIRST PROMPT
                01251 ; THE CHARACTER IN A (GIVEN BY THE CALLER), THEN IT FILLS
                01252 ; THE BUFFER AND ECHOS.  IT IGNORES LF'S AND NULLS, BUT STILL
                01253 ; ECHOS THEM BACK.  RUB-OUT IS USED TO CAUSE IT TO DELETE
                01254 ; THE LAST CHARACTER (IF THERE IS ONE), AND ALT-MOD IS USED TO
                01255 ; CAUSE IT TO DELETE THE WHOLE LINE AND START IT ALL OVER.
                01256 ; CR SIGNALS THE END OF A LINE, AND CAUSE 'GETLN' TO RETURN.
                01257 ;
                01258 ; 'FNDLN' FINDS A LINE WITH A GIVEN LINE # (IN HL) IN THE
                01259 ; TEXT SAVE AREA.  DE IS USED AS THE TEXT POINTER.  IF THE
                01260 ; LINE IS FOUND, DE WILL POINT TO THE BEGINNING OF THAT LINE
                01261 ; (I.E., THE LOW BYTE OF THE LINE #), AND FLAGS ARE NC & Z.
                01262 ; IF THAT LINE IS NOT THERE AND A LINE WITH A HIGHER LINE #
                01263 ; IS FOUND, DE POINTS TO THERE AND FLAGS ARE NC & NZ.  IF
                01264 ; WE REACHED THE END OF TEXT SAVE AREA AND CANNOT FIND THE
                01265 ; LINE, FLAGS ARE C & NZ.
                01266 ; 'FNDLN' WILL INITIALIZE DE TO THE BEGINNING OF THE TEXT SAVE
                01267 ; AREA TO START THE SEARCH.  SOME OTHER ENTRIES OF THIS
                01268 ; ROUTINE WILL NOT INITIALIZE DE AND DO THE SEARCH.
                01269 ; 'FNDLNP' WILL START WITH DE AND SEARCH FOR THE LINE #.
                01270 ; 'FNDNXT' WILL BUMP DE BY 2, FIND A CR AND THEN START SEARCH.
                01271 ; 'FNDSKP' USE DE TO FIND A CR, AND THEN START SEARCH.
                01272 ;*************************************************************
                01273 
                01274 GETLN:
04D5  D7        01275         RST 10H                         ;*** GETLN ***
04D6  11370F    01276         LD DE,BUFFER                    ;PROMPT AND INIT.
                01277 GL1:
                01278         ;-- Z80-FPGA: Testing!
04D9  CD4506    01279         CALL CHKIO                      ;CHECK KEYBOARD
04DC  28FB      01280         JR Z,GL1                        ;NO INPUT, WAIT
04DE  FE7F      01281         CP 7FH                          ;DELETE LAST CHARACTER?
04E0  2816      01282         JR Z,GL3                        ;YES
04E2  D7        01283         RST 10H                         ;INPUT, ECHO BACK
04E3  FE0A      01284         CP 0AH                          ;IGNORE LF
04E5  28F2      01285         JR Z,GL1
04E7  B7        01286         OR A                            ;IGNORE NULL
04E8  28EF      01287         JR Z,GL1
04EA  FE7D      01288         CP 7DH                          ;DELETE THE WHOLE LINE?
04EC  2815      01289         JR Z,GL4                        ;YES
04EE  12        01290         LD (DE),A                       ;ELSE SAVE INPUT
04EF  13        01291         INC DE                          ;AND BUMP POINTER
04F0  FE0D      01292         CP 0DH                          ;WAS IT CR
04F2  C8        01293         RET Z                           ;YES, END OF LINE
04F3  7B        01294         LD A,E                          ;ELSE MORE FREE ROOM?
04F4  FE77      01295         CP BUFEND & 0FFH
04F6  20E1      01296         JR NZ,GL1                       ;YES, GET NEXT INPUT
                01297 GL3:
04F8  7B        01298         LD A,E                          ;DELETE LAST CHARACTER
04F9  FE37      01299         CP BUFFER & 0FFH                ;BUT DO WE HAVE ANY?
04FB  2806      01300         JR Z,GL4                        ;NO, REDO WHOLE LINE
04FD  1B        01301         DEC DE                          ;YES, BACKUP POINTER
04FE  3E5C      01302         LD A,5CH                        ;AND ECHO A BACK-SLASH
0500  D7        01303         RST 10H
0501  18D6      01304         JR GL1                          ;GO GET NEXT INPUT
                01305 GL4:
0503  CD0E00    01306         CALL CRLF                       ;REDO ENTIRE LINE
0506  3E5E      01307         LD A,05EH                       ;CR, LF AND UP-ARROW
0508  18CB      01308         JR GETLN
                01309 FNDLN:
050A  7C        01310         LD A,H                          ;*** FNDLN ***
050B  B7        01311         OR A                            ;CHECK SIGN OF HL
050C  FA9D00    01312         JP M,QHOW                       ;IT CANNOT BE -
050F  111708    01313         LD DE,TXTBGN                    ;INIT TEXT POINTER
                01314 FNDLP:                                  ;*** FDLNP ***
                01315 FL1:
0512  E5        01316         PUSH HL                         ;SAVE LINE #
0513  2A1508    01317         LD HL,(TXTUNF)                  ;CHECK IF WE PASSED END
0516  2B        01318         DEC HL
0517  E7        01319         RST 20H
0518  E1        01320         POP HL                          ;GET LINE # BACK
0519  D8        01321         RET C                           ;C,NZ PASSED END
051A  1A        01322         LD A,(DE)                       ;WE DID NOT, GET BYTE 1
051B  95        01323         SUB L                           ;IS THIS THE LINE?
051C  47        01324         LD B,A                          ;COMPARE LOW ORDER
051D  13        01325         INC DE
051E  1A        01326         LD A,(DE)                       ;GET BYTE 2
051F  9C        01327         SBC A,H                         ;COMPARE HIGH ORDER
0520  3804      01328         JR C,FL2                        ;NO, NOT THERE YET
0522  1B        01329         DEC DE                          ;ELSE WE EITHER FOUND
0523  B0        01330         OR B                            ;IT, OR IT IS NOT THERE
0524  C9        01331         RET                             ;NC,Z;FOUND, NC,NZ:NO
                01332 FNDNXT:                                 ;*** FNDNXT ***
0525  13        01333         INC DE                          ;FIND NEXT LINE
                01334 FL2:
0526  13        01335         INC DE                          ;JUST PASSED BYTE 1 & 2
                01336 FNDSKP:
0527  1A        01337         LD A,(DE)                       ;*** FNDSKP ***
0528  FE0D      01338         CP CR                           ;TRY TO FIND CR
052A  20FA      01339         JR NZ,FL2                       ;KEEP LOOKING
052C  13        01340         INC DE                          ;FOUND CR, SKIP OVER
052D  18E3      01341         JR FL1                          ;CHECK IF END OF TEXT
                01342 ;*************************************************************
                01343 ;
                01344 ; *** PRTSTG *** QTSTG *** PRTNUM *** & PRTLN ***
                01345 ;
                01346 ; 'PRTSTG' PRINTS A STRING POINTED BY DE.  IT STOPS PRINTING
                01347 ; AND RETURNS TO CALLER WHEN EITHER A CR IS PRINTED OR WHEN
                01348 ; THE NEXT BYTE IS THE SAME AS WHAT WAS IN A (GIVEN BY THE
                01349 ; CALLER).  OLD A IS STORED IN B, OLD B IS LOST.
                01350 ;
                01351 ; 'QTSTG' LOOKS FOR A BACK-ARROW, SINGLE QUOTE, OR DOUBLE
                01352 ; QUOTE.  IF NONE OF THESE, RETURN TO CALLER.  IF BACK-ARROW,
                01353 ; OUTPUT A CR WITHOUT A LF.  IF SINGLE OR DOUBLE QUOTE, PRINT
                01354 ; THE STRING IN THE QUOTE AND DEMANDS A MATCHING UNQUOTE.
                01355 ; AFTER THE PRINTING THE NEXT 3 BYTES OF THE CALLER IS SKIPPED
                01356 ; OVER (USUALLY A JUMP INSTRUCTION.
                01357 ;
                01358 ; 'PRTNUM' PRINTS THE NUMBER IN HL.  LEADING BLANKS ARE ADDED
                01359 ; IF NEEDED TO PAD THE NUMBER OF SPACES TO THE NUMBER IN C.
                01360 ; HOWEVER, IF THE NUMBER OF DIGITS IS LARGER THAN THE # IN
                01361 ; C, ALL DIGITS ARE PRINTED ANYWAY.  NEGATIVE SIGN IS ALSO
                01362 ; PRINTED AND COUNTED IN, POSITIVE SIGN IS NOT.
                01363 ;
                01364 ; 'PRTLN' PRINTS A SAVED TEXT LINE WITH LINE # AND ALL.
                01365 ;*************************************************************
                01366 
                01367 PRTSTG:
052F  47        01368         LD B,A                          ;*** PRTSTG ***
                01369 PS1:
0530  1A        01370         LD A,(DE)                       ;GET A CHARACTER
0531  13        01371         INC DE                          ;BUMP POINTER
0532  B8        01372         CP B                            ;SAME AS OLD A?
0533  C8        01373         RET Z                           ;YES, RETURN
0534  D7        01374         RST 10H                         ;NO, NEXT
0535  FE0D      01375         CP CR                           ;WAS IT A CR?
0537  20F7      01376         JR NZ,PS1                       ;NO, NEXT
0539  C9        01377         RET                             ;YES, RETURN
                01378 QTSTG:
053A  CF        01379         RST 08H                         ;*** QTSTG ***
053B  22        01380         DB '"'
053C  0F        01381         DB QT3-$-1
053D  3E22      01382         LD A,22H                        ;IT IS A "
                01383 QT1:
053F  CD2F05    01384         CALL PRTSTG                     ;PRINT UNTIL ANOTHER
0542  FE0D      01385         CP CR                           ;WAS LAST ONE A CR?
0544  E1        01386         POP HL                          ;RETURN ADDRESS
0545  CA4201    01387         JP Z,RUNNXL                     ;WAS CR, RUN NEXT LINE
                01388 QT2:
0548  23        01389         INC HL                          ;SKIP 3 BYTES ON RETURN
0549  23        01390         INC HL
054A  23        01391         INC HL
054B  E9        01392         JP (HL)                         ;RETURN
                01393 QT3:
054C  CF        01394         RST 08H                         ;IS IT A '?
054D  27        01395         DB 27H
054E  04        01396         DB QT4-$-1
054F  3E27      01397         LD A,27H                        ;YES, DO THE SAME
0551  18EC      01398         JR QT1                          ;AS IN ""
                01399 QT4:
0553  CF        01400         RST 08H                         ;IS IT BACK-ARROW?
0554  5F        01401         DB 5FH
0555  07        01402         DB QT5-$-1
0556  3E8D      01403         LD A,8DH                        ;YES, CR WITHOUT LF
0558  D7        01404         RST 10H                         ;DO IT TWICE TO GIVE
0559  D7        01405         RST 10H                         ;TTY ENOUGH TIME
055A  E1        01406         POP HL                          ;RETURN ADDRESS
055B  18EB      01407         JR QT2
                01408 QT5:
055D  C9        01409         RET                             ;NONE OF ABOVE
                01410 ;
                01411 PRTNUM:
055E  0600      01412         LD B,00H                        ;*** PRTNUM ***
0560  CD5F04    01413         CALL CHKSGN                     ;CHECK SIGN
0563  F26905    01414         JP P,PN1                        ;NO SIGN
0566  062D      01415         LD B,'-'                        ;B=SIGN
0568  0D        01416         DEC C                           ;'-' TAKES SPACE
                01417 PN1:
0569  D5        01418         PUSH DE                         ;SAVE
056A  110A00    01419         LD DE,000AH                     ;DECIMAL
056D  D5        01420         PUSH DE                         ;SAVE AS FLAG
056E  0D        01421         DEC C                           ;C=SPACES
056F  C5        01422         PUSH BC                         ;SAVE SIGN & SPACE
                01423 PN2:
0570  CD4304    01424         CALL DIVIDE                     ;DIVIDE HL BY 10
0573  78        01425         LD A,B                          ;RESULT 0?
0574  B1        01426         OR C
0575  2807      01427         JR Z,PN3                        ;YES, WE GOT ALL
0577  E3        01428         EX (SP),HL                      ;NO, SAVE REMAINDER
0578  2D        01429         DEC L                           ;AND COUNT SPACE
0579  E5        01430         PUSH HL                         ;HL IS OLD BC
057A  60        01431         LD H,B                          ;MOVE RESULT TO BC
057B  69        01432         LD L,C
057C  18F2      01433         JR PN2                          ;AND DIVIDE BY 10
                01434 PN3:
057E  C1        01435         POP BC                          ;WE GOT ALL DIGITS IN
                01436 PN4:
057F  0D        01437         DEC C                           ;THE STACK
0580  79        01438         LD A,C                          ;LOOK AT SPACE COUNT
0581  B7        01439         OR A
0582  FA8A05    01440         JP M,PN5                        ;NO LEADING BLANKS
0585  3E20      01441         LD A,20H                        ;LEADING BLANKS
0587  D7        01442         RST 10H
0588  18F5      01443         JR PN4                          ;MORE?
                01444 PN5:
058A  78        01445         LD A,B                          ;PRINT SIGN
058B  B7        01446         OR A
058C  C41000    01447         CALL NZ,0010H
058F  5D        01448         LD E,L                          ;LAST REMAINDER IN E
                01449 PN6:
0590  7B        01450         LD A,E                          ;CHECK DIGIT IN E
0591  FE0A      01451         CP 0AH                          ;10 IS FLAG FOR NO MORE
0593  D1        01452         POP DE
0594  C8        01453         RET Z                           ;IF SO, RETURN
0595  C630      01454         ADD A,30H                       ;ELSE, CONVERT TO ASCII
0597  D7        01455         RST 10H                         ;PRINT THE DIGIT
0598  18F6      01456         JR PN6                          ;GO BACK FOR MORE
                01457 PRTLN:
059A  1A        01458         LD A,(DE)                       ;*** PRTLN ***
059B  6F        01459         LD L,A                          ;LOW ORDER LINE #
059C  13        01460         INC DE
059D  1A        01461         LD A,(DE)                       ;HIGH ORDER
059E  67        01462         LD H,A
059F  13        01463         INC DE
05A0  0E04      01464         LD C,04H                        ;PRINT 4 DIGIT LINE #
05A2  CD5E05    01465         CALL PRTNUM
05A5  3E20      01466         LD A,20H                        ;FOLLOWED BY A BLANK
05A7  D7        01467         RST 10H
05A8  97        01468         SUB A                           ;AND THEN THE NEXT
05A9  CD2F05    01469         CALL PRTSTG
05AC  C9        01470         RET
                01471 ;*************************************************************
                01472 ;
                01473 ; *** MVUP *** MVDOWN *** POPA *** & PUSHA ***
                01474 ;
                01475 ; 'MVUP' MOVES A BLOCK UP FROM WHERE DE-> TO WHERE BC-> UNTIL
                01476 ; DE = HL
                01477 ;
                01478 ; 'MVDOWN' MOVES A BLOCK DOWN FROM WHERE DE-> TO WHERE HL->
                01479 ; UNTIL DE = BC
                01480 ;
                01481 ; 'POPA' RESTORES THE 'FOR' LOOP VARIABLE SAVE AREA FROM THE
                01482 ; STACK
                01483 ;
                01484 ; 'PUSHA' STACKS THE 'FOR' LOOP VARIABLE SAVE AREA INTO THE
                01485 ; STACK
                01486 ;*************************************************************
                01487 
                01488 MVUP:
05AD  E7        01489         RST 20H                         ;*** MVUP ***
05AE  C8        01490         RET Z                           ;DE = HL, RETURN
05AF  1A        01491         LD A,(DE)                       ;GET ONE BYTE
05B0  02        01492         LD (BC),A                       ;MOVE IT
05B1  13        01493         INC DE                          ;INCREASE BOTH POINTERS
05B2  03        01494         INC BC
05B3  18F8      01495         JR MVUP                         ;UNTIL DONE
                01496 MVDOWN:
05B5  78        01497         LD A,B                          ;*** MVDOWN ***
05B6  92        01498         SUB D                           ;TEST IF DE = BC
05B7  C2BD05    01499         JP NZ,MD1                       ;NO, GO MOVE
05BA  79        01500         LD A,C                          ;MAYBE, OTHER BYTE?
05BB  93        01501         SUB E
05BC  C8        01502         RET Z                           ;YES, RETURN
                01503 MD1:
05BD  1B        01504         DEC DE                          ;ELSE MOVE A BYTE
05BE  2B        01505         DEC HL                          ;BUT FIRST DECREASE
05BF  1A        01506         LD A,(DE)                       ;BOTH POINTERS AND
05C0  77        01507         LD (HL),A                       ;THEN DO IT
05C1  18F2      01508         JR MVDOWN                       ;LOOP BACK
                01509 POPA:
05C3  C1        01510         POP BC                          ;BC = RETURN ADDR.
05C4  E1        01511         POP HL                          ;RESTORE LOPVAR, BUT
05C5  220908    01512         LD (LOPVAR),HL                  ;=0 MEANS NO MORE
05C8  7C        01513         LD A,H
05C9  B5        01514         OR L
05CA  2810      01515         JR Z,PP1                        ;YEP, GO RETURN
05CC  E1        01516         POP HL                          ;NOP, RESTORE OTHERS
05CD  220B08    01517         LD (LOPINC),HL
05D0  E1        01518         POP HL
05D1  220D08    01519         LD (LOPLMT),HL
05D4  E1        01520         POP HL
05D5  220F08    01521         LD (LOPLN),HL
05D8  E1        01522         POP HL
05D9  221108    01523         LD (LOPPT),HL
                01524 PP1:
05DC  C5        01525         PUSH BC                         ;BC = RETURN ADDR.
05DD  C9        01526         RET
                01527 PUSHA:
05DE  21780F    01528         LD HL,STKLMT                    ;*** PUSHA ***
05E1  CD6204    01529         CALL CHGSGN
05E4  C1        01530         POP BC                          ;BC=RETURN ADDRESS
05E5  39        01531         ADD HL,SP                       ;IS STACK NEAR THE TOP?
05E6  D2CF04    01532         JP NC,QSORRY                    ;YES, SORRY FOR THAT
05E9  2A0908    01533         LD HL,(LOPVAR)                  ;ELSE SAVE LOOP VAR'S
05EC  7C        01534         LD A,H                          ;BUT IF LOPVAR IS 0
05ED  B5        01535         OR L                            ;THAT WILL BE ALL
05EE  2813      01536         JR Z,PU1
05F0  2A1108    01537         LD HL,(LOPPT)                   ;ELSE, MORE TO SAVE
05F3  E5        01538         PUSH HL
05F4  2A0F08    01539         LD HL,(LOPLN)
05F7  E5        01540         PUSH HL
05F8  2A0D08    01541         LD HL,(LOPLMT)
05FB  E5        01542         PUSH HL
05FC  2A0B08    01543         LD HL,(LOPINC)
05FF  E5        01544         PUSH HL
0600  2A0908    01545         LD HL,(LOPVAR)
                01546 PU1:
0603  E5        01547         PUSH HL
0604  C5        01548         PUSH BC                         ;BC = RETURN ADDR.
0605  C9        01549         RET
                01550 ;*************************************************************
                01551 ;
                01552 ; *** OUTC *** & CHKIO ***
                01553 ;
                01554 ; THESE ARE THE ONLY I/O ROUTINES IN TBI.
                01555 ; 'OUTC' IS CONTROLLED BY A SOFTWARE SWITCH 'OCSW'.  IF OCSW=0
                01556 ; 'OUTC' WILL JUST RETURN TO THE CALLER.  IF OCSW IS NOT 0,
                01557 ; IT WILL OUTPUT THE BYTE IN A.  IF THAT IS A CR, A LF IS ALSO
                01558 ; SEND OUT.  ONLY THE FLAGS MAY BE CHANGED AT RETURN. ALL REG.
                01559 ; ARE RESTORED.
                01560 ;
                01561 ; 'CHKIO' CHECKS THE INPUT.  IF NO INPUT, IT WILL RETURN TO
                01562 ; THE CALLER WITH THE Z FLAG SET.  IF THERE IS INPUT, Z FLAG
                01563 ; IS CLEARED AND THE INPUT BYTE IS IN A.  HOWEVER, IF THE
                01564 ; INPUT IS A CONTROL-O, THE 'OCSW' SWITCH IS COMPLIMENTED, AND
                01565 ; Z FLAG IS RETURNED.  IF A CONTROL-C IS READ, 'CHKIO' WILL
                01566 ; RESTART TBI AND DO NOT RETURN TO THE CALLER.
                01567 ;
                01568 ; Do not modify these routines.  Routines requiring
                01569 ; modification are : SERIAL_INIT, RX_RDY, and TX_RDY.
                01570 ;*************************************************************
                01571 
                01572 INIT:
0606  F3        01573         DI
                01574 
                01575         ;---- Z80-FPGA: Debug! Comprobar si se encienden los leds
0607  3E01      01576         LD A,01h
0609  D340      01577         OUT (40h), A
                01578 
                01579 
060B  CD5E07    01580         CALL SERIAL_INIT        ;INITIALIZE THE SIO
                01581 
                01582 
060E  1619      01583         LD D,19H
                01584 PATLOP:
0610  CD0E00    01585         CALL CRLF
0613  15        01586         DEC D
0614  20FA      01587         JR NZ,PATLOP
0616  97        01588         SUB A
0617  116B06    01589         LD DE,MSG1          ;PRINT THE BOOT MESSAGES
061A  CD2F05    01590         CALL PRTSTG
061D  118C06    01591         LD DE,MSG2
0620  CD2F05    01592         CALL PRTSTG
0623  210000    01593         LD HL,START
0626  221308    01594         LD (RANPNT),HL
0629  211708    01595         LD HL,TXTBGN
062C  221508    01596         LD (TXTUNF),HL
062F  C3B800    01597         JP RSTART
                01598 OUTC:
0632  1802      01599         JR OUTC2
                01600         ;-- Z80-FPGA: Modificado para que siempre salte a OUTC2
                01601         ;JR NZ,OUTC2         ;IT IS ON
0634  F1        01602         POP AF                          ;IT IS OFF
0635  C9        01603         RET                             ;RESTORE AF AND RETURN
                01604 OUTC2:
0636  CD5F07    01605         CALL TX_RDY         ;SEE IF TRANSMIT IS AVAILABLE
0639  F1        01606         POP AF                          ;RESTORE THE REGISTER
063A  D301      01607         OUT (SerialPort),A      ;SEND THE BYTE
063C  FE0D      01608         CP CR
063E  C0        01609         RET NZ
063F  3E0A      01610         LD A,LF
0641  D7        01611         RST 10H
0642  3E0D      01612         LD A,CR
0644  C9        01613         RET
                01614 CHKIO:
0645  CD6007    01615         CALL RX_RDY         ;CHECK IF CHARACTER AVAILABLE
0648  C8        01616         RET Z                           ;RETURN IF NO CHARACTER AVAILABLE
                01617 
                01618         ;-- Z80-FPGA
                01619         ;-- Debug: Sacar el caracter recibido por los LEDs
0649  D340      01620         out (40h), A
                01621 
064B  C5        01622         PUSH BC                         ;IF IT'S A LF, IGNORE AND RETURN
064C  47        01623         LD B,A                          ; AS IF THERE WAS NO CHARACTER.
064D  D60A      01624         SUB LF
064F  280F      01625         JR Z,CHKIO2
0651  78        01626         LD A,B                          ;OTHERWISE RESTORE 'A' AND 'BC'
0652  C1        01627         POP BC                          ; AND CONTINUE ON.
                01628 
0653  FE0F      01629         CP 0FH                          ;IS IT CONTROL-0?
0655  200E      01630         JR NZ,CI1                       ;NO, MORE CHECKING
0657  3A0008    01631         LD A,(OCSW)                     ;CONTROL-0 FLIPS OCSW
065A  2F        01632         CPL                             ;ON TO OFF, OFF TO ON
065B  320008    01633         LD (OCSW),A
065E  18E5      01634         JR CHKIO                        ;GET ANOTHER INPUT
                01635 CHKIO2:
0660  3E00      01636         LD A,00H                        ;CLEAR A
0662  B7        01637         OR A                            ;ZET THE Z-FLAG
0663  C1        01638         POP BC                          ;RESTORE THE 'BC' PAIR
0664  C9        01639         RET                             ;RETURN WITH 'Z' SET.
                01640 CI1:
0665  FE03      01641         CP 03H                          ;IS IT CONTROL-C?
0667  C0        01642         RET NZ                          ;NO, RETURN "NZ"
0668  C3B800    01643         JP RSTART                       ;YES, RESTART TBI
                01644 
                01645 
066B  1B5B324A  01646 MSG1:   DB   ESC,"[2J",ESC,"[H"         ;SCREEN CLEAR
      22 2C 45 53 43 2C 22 5B
      48                     
0678  5A383020  01647         DB   'Z80 TINY BASIC 2.0g',CR       ;BOOT MESSAGE
      54 49 4E 59 20 42 41 53
      49 43 20 32 2E 30 67 0D
068C  504F5254  01648 MSG2:   DB   'PORTED BY DOUG GABBARD, 2017',CR
      45 44 20 42 59 20 44 4F
      55 47 20 47 41 42 42 41
      52 44 2C 20 32 30 31 37
      0D                     
                01649 
                01650 ;*************************************************************
                01651 ;
                01652 ; *** TABLES *** DIRECT *** & EXEC ***
                01653 ;
                01654 ; THIS SECTION OF THE CODE TESTS A STRING AGAINST A TABLE.
                01655 ; WHEN A MATCH IS FOUND, CONTROL IS TRANSFERED TO THE SECTION
                01656 ; OF CODE ACCORDING TO THE TABLE.
                01657 ;
                01658 ; AT 'EXEC', DE SHOULD POINT TO THE STRING AND HL SHOULD POINT
                01659 ; TO THE TABLE-1.  AT 'DIRECT', DE SHOULD POINT TO THE STRING.
                01660 ; HL WILL BE SET UP TO POINT TO TAB1-1, WHICH IS THE TABLE OF
                01661 ; ALL DIRECT AND STATEMENT COMMANDS.
                01662 ;
                01663 ; A '.' IN THE STRING WILL TERMINATE THE TEST AND THE PARTIAL
                01664 ; MATCH WILL BE CONSIDERED AS A MATCH.  E.G., 'P.', 'PR.',
                01665 ; 'PRI.', 'PRIN.', OR 'PRINT' WILL ALL MATCH 'PRINT'.
                01666 ;
                01667 ; THE TABLE CONSISTS OF ANY NUMBER OF ITEMS.  EACH ITEM
                01668 ; IS A STRING OF CHARACTERS WITH BIT 7 SET TO 0 AND
                01669 ; A JUMP ADDRESS STORED HI-LOW WITH BIT 7 OF THE HIGH
                01670 ; BYTE SET TO 1.
                01671 ;
                01672 ; END OF TABLE IS AN ITEM WITH A JUMP ADDRESS ONLY.  IF THE
                01673 ; STRING DOES NOT MATCH ANY OF THE OTHER ITEMS, IT WILL
                01674 ; MATCH THIS NULL ITEM AS DEFAULT.
                01675 ;*************************************************************
                01676 
                01677 TAB1:                                   ;DIRECT COMMANDS
06A9  4C495354  01678         DB 'LIST'
06AD            01679         DWA LIST
06AD  81        01680+        DB   .HIGH.LIST + 128
06AE  69        01681+        DB   .LOW.LIST & 0FFH
                01682+;        DB   (LIST.SHR.8) + 128
                01683+;        DB   LIST & 0FFH
                01684+        ENDM
06AF  52554E    01685         DB 'RUN'
06B2            01686         DWA RUN
06B2  81        01687+        DB   .HIGH.RUN + 128
06B3  3C        01688+        DB   .LOW.RUN & 0FFH
                01689+;        DB   (RUN.SHR.8) + 128
                01690+;        DB   RUN & 0FFH
                01691+        ENDM
06B4  4E4557    01692         DB 'NEW'
06B7            01693         DWA NEW
06B7  81        01694+        DB   .HIGH.NEW + 128
06B8  2D        01695+        DB   .LOW.NEW & 0FFH
                01696+;        DB   (NEW.SHR.8) + 128
                01697+;        DB   NEW & 0FFH
                01698+        ENDM
                01699 TAB2:                                   ;DIRECT/STATEMENT
06B9  4E455854  01700         DB 'NEXT'
06BD            01701         DWA NEXT
06BD  82        01702+        DB   .HIGH.NEXT + 128
06BE  46        01703+        DB   .LOW.NEXT & 0FFH
                01704+;        DB   (NEXT.SHR.8) + 128
                01705+;        DB   NEXT & 0FFH
                01706+        ENDM
06BF  4C4554    01707         DB 'LET'
06C2            01708         DWA LET
06C2  83        01709+        DB   .HIGH.LET + 128
06C3  0A        01710+        DB   .LOW.LET & 0FFH
                01711+;        DB   (LET.SHR.8) + 128
                01712+;        DB   LET & 0FFH
                01713+        ENDM
06C4  4946      01714         DB 'IF'
06C6            01715         DWA IFF
06C6  82        01716+        DB   .HIGH.IFF + 128
06C7  A0        01717+        DB   .LOW.IFF & 0FFH
                01718+;        DB   (IFF.SHR.8) + 128
                01719+;        DB   IFF & 0FFH
                01720+        ENDM
06C8  474F544F  01721         DB 'GOTO'
06CC            01722         DWA GOTO
06CC  81        01723+        DB   .HIGH.GOTO + 128
06CD  5B        01724+        DB   .LOW.GOTO & 0FFH
                01725+;        DB   (GOTO.SHR.8) + 128
                01726+;        DB   GOTO & 0FFH
                01727+        ENDM
06CE  474F5355  01728         DB 'GOSUB'
      42                     
06D3            01729         DWA GOSUB
06D3  81        01730+        DB   .HIGH.GOSUB + 128
06D4  B2        01731+        DB   .LOW.GOSUB & 0FFH
                01732+;        DB   (GOSUB.SHR.8) + 128
                01733+;        DB   GOSUB & 0FFH
                01734+        ENDM
06D5  52455455  01735         DB 'RETURN'
      52 4E                  
06DB            01736         DWA RETURN
06DB  81        01737+        DB   .HIGH.RETURN + 128
06DC  D2        01738+        DB   .LOW.RETURN & 0FFH
                01739+;        DB   (RETURN.SHR.8) + 128
                01740+;        DB   RETURN & 0FFH
                01741+        ENDM
06DD  52454D    01742         DB 'REM'
06E0            01743         DWA REM
06E0  82        01744+        DB   .HIGH.REM + 128
06E1  9C        01745+        DB   .LOW.REM & 0FFH
                01746+;        DB   (REM.SHR.8) + 128
                01747+;        DB   REM & 0FFH
                01748+        ENDM
06E2  464F52    01749         DB 'FOR'
06E5            01750         DWA FOR
06E5  81        01751+        DB   .HIGH.FOR + 128
06E6  EB        01752+        DB   .LOW.FOR & 0FFH
                01753+;        DB   (FOR.SHR.8) + 128
                01754+;        DB   FOR & 0FFH
                01755+        ENDM
06E7  494E5055  01756         DB 'INPUT'
      54                     
06EC            01757         DWA INPUT
06EC  82        01758+        DB   .HIGH.INPUT + 128
06ED  B9        01759+        DB   .LOW.INPUT & 0FFH
                01760+;        DB   (INPUT.SHR.8) + 128
                01761+;        DB   INPUT & 0FFH
                01762+        ENDM
06EE  5052494E  01763         DB 'PRINT'
      54                     
06F3            01764         DWA PRINT
06F3  81        01765+        DB   .HIGH.PRINT + 128
06F4  80        01766+        DB   .LOW.PRINT & 0FFH
                01767+;        DB   (PRINT.SHR.8) + 128
                01768+;        DB   PRINT & 0FFH
                01769+        ENDM
06F5  53544F50  01770         DB 'STOP'
06F9            01771         DWA STOP
06F9  81        01772+        DB   .HIGH.STOP + 128
06FA  36        01773+        DB   .LOW.STOP & 0FFH
                01774+;        DB   (STOP.SHR.8) + 128
                01775+;        DB   STOP & 0FFH
                01776+        ENDM
06FB            01777         DWA DEFLT
06FB  83        01778+        DB   .HIGH.DEFLT + 128
06FC  05        01779+        DB   .LOW.DEFLT & 0FFH
                01780+;        DB   (DEFLT.SHR.8) + 128
                01781+;        DB   DEFLT & 0FFH
                01782+        ENDM
                01783 TAB4:                                   ;FUNCTIONS
06FD  524E44    01784         DB 'RND'
0700            01785         DWA RND
0700  84        01786+        DB   .HIGH.RND + 128
0701  03        01787+        DB   .LOW.RND & 0FFH
                01788+;        DB   (RND.SHR.8) + 128
                01789+;        DB   RND & 0FFH
                01790+        ENDM
0702  414253    01791         DB 'ABS'
0705            01792         DWA ABS
0705  84        01793+        DB   .HIGH.ABS + 128
0706  2D        01794+        DB   .LOW.ABS & 0FFH
                01795+;        DB   (ABS.SHR.8) + 128
                01796+;        DB   ABS & 0FFH
                01797+        ENDM
0707  53495A45  01798         DB 'SIZE'
070B            01799         DWA SIZE
070B  84        01800+        DB   .HIGH.SIZE + 128
070C  36        01801+        DB   .LOW.SIZE & 0FFH
                01802+;        DB   (SIZE.SHR.8) + 128
                01803+;        DB   SIZE & 0FFH
                01804+        ENDM
070D            01805         DWA XP40
070D  83        01806+        DB   .HIGH.XP40 + 128
070E  EA        01807+        DB   .LOW.XP40 & 0FFH
                01808+;        DB   (XP40.SHR.8) + 128
                01809+;        DB   XP40 & 0FFH
                01810+        ENDM
                01811 TAB5:                                   ;"TO" IN "FOR"
070F  544F      01812         DB 'TO'
0711            01813         DWA FR1
0711  81        01814+        DB   .HIGH.FR1 + 128
0712  FB        01815+        DB   .LOW.FR1 & 0FFH
                01816+;        DB   (FR1.SHR.8) + 128
                01817+;        DB   FR1 & 0FFH
                01818+        ENDM
0713            01819         DWA QWHAT
0713  84        01820+        DB   .HIGH.QWHAT + 128
0714  A2        01821+        DB   .LOW.QWHAT & 0FFH
                01822+;        DB   (QWHAT.SHR.8) + 128
                01823+;        DB   QWHAT & 0FFH
                01824+        ENDM
                01825 TAB6:                                   ;"STEP" IN "FOR"
0715  53544550  01826         DB 'STEP'
0719            01827         DWA FR2
0719  82        01828+        DB   .HIGH.FR2 + 128
071A  05        01829+        DB   .LOW.FR2 & 0FFH
                01830+;        DB   (FR2.SHR.8) + 128
                01831+;        DB   FR2 & 0FFH
                01832+        ENDM
071B            01833         DWA FR3
071B  82        01834+        DB   .HIGH.FR3 + 128
071C  08        01835+        DB   .LOW.FR3 & 0FFH
                01836+;        DB   (FR3.SHR.8) + 128
                01837+;        DB   FR3 & 0FFH
                01838+        ENDM
                01839 TAB8:                                   ;RELATION OPERATORS
071D  3E3D      01840         DB '>='
071F            01841         DWA XP11
071F  83        01842+        DB   .HIGH.XP11 + 128
0720  19        01843+        DB   .LOW.XP11 & 0FFH
                01844+;        DB   (XP11.SHR.8) + 128
                01845+;        DB   XP11 & 0FFH
                01846+        ENDM
0721  23        01847         DB '#'
0722            01848         DWA XP12
0722  83        01849+        DB   .HIGH.XP12 + 128
0723  1F        01850+        DB   .LOW.XP12 & 0FFH
                01851+;        DB   (XP12.SHR.8) + 128
                01852+;        DB   XP12 & 0FFH
                01853+        ENDM
0724  3E        01854         DB '>'
0725            01855         DWA XP13
0725  83        01856+        DB   .HIGH.XP13 + 128
0726  25        01857+        DB   .LOW.XP13 & 0FFH
                01858+;        DB   (XP13.SHR.8) + 128
                01859+;        DB   XP13 & 0FFH
                01860+        ENDM
0727  3D        01861         DB '='
0728            01862         DWA XP15
0728  83        01863+        DB   .HIGH.XP15 + 128
0729  34        01864+        DB   .LOW.XP15 & 0FFH
                01865+;        DB   (XP15.SHR.8) + 128
                01866+;        DB   XP15 & 0FFH
                01867+        ENDM
072A  3C3D      01868         DB '<='
072C            01869         DWA XP14
072C  83        01870+        DB   .HIGH.XP14 + 128
072D  2C        01871+        DB   .LOW.XP14 & 0FFH
                01872+;        DB   (XP14.SHR.8) + 128
                01873+;        DB   XP14 & 0FFH
                01874+        ENDM
072E  3C        01875         DB '<'
072F            01876         DWA XP16
072F  83        01877+        DB   .HIGH.XP16 + 128
0730  3A        01878+        DB   .LOW.XP16 & 0FFH
                01879+;        DB   (XP16.SHR.8) + 128
                01880+;        DB   XP16 & 0FFH
                01881+        ENDM
0731            01882         DWA XP17
0731  83        01883+        DB   .HIGH.XP17 + 128
0732  40        01884+        DB   .LOW.XP17 & 0FFH
                01885+;        DB   (XP17.SHR.8) + 128
                01886+;        DB   XP17 & 0FFH
                01887+        ENDM
0733  21A806    01888 DIRECT: LD HL,TAB1-1                   ;*** DIRECT ***
                01889 EXEC:                                   ;*** EXEC ***
0736  EF        01890 EX0:    RST 28H                         ;IGNORE LEADING BLANKS
0737  D5        01891         PUSH DE                         ;SAVE POINTER
                01892 EX1:
0738  1A        01893         LD A,(DE)                       ;IF FOUND '.' IN STRING
0739  13        01894         INC DE                          ;BEFORE ANY MISMATCH
073A  FE23      01895         CP 23H                          ;WE DECLARE A MATCH
073C  2812      01896         JR Z,EX3
073E  23        01897         INC HL                          ;HL->TABLE
073F  BE        01898         CP (HL)                         ;IF MATCH, TEST NEXT
0740  28F6      01899         JR Z,EX1
0742  3E7F      01900         LD A,7FH                        ;ELSE SEE IF BIT 7
0744  1B        01901         DEC DE                          ;OF TABLE IS SET, WHICH
0745  BE        01902         CP (HL)                         ;IS THE JUMP ADDR. (HI)
0746  380E      01903         JR C,EX5                        ;C:YES, MATCHED
                01904 EX2:
0748  23        01905         INC HL                          ;NC:NO, FIND JUMP ADDR.
0749  BE        01906         CP (HL)
074A  30FC      01907         JR NC,EX2
074C  23        01908         INC HL                          ;BUMP TO NEXT TAB. ITEM
074D  D1        01909         POP DE                          ;RESTORE STRING POINTER
074E  18E6      01910         JR EX0                          ;TEST AGAINST NEXT ITEM
                01911 EX3:
0750  3E7F      01912         LD A,7FH                        ;PARTIAL MATCH, FIND
                01913 EX4:
0752  23        01914         INC HL                          ;JUMP ADDR., WHICH IS
0753  BE        01915         CP (HL)                         ;FLAGGED BY BIT 7
0754  30FC      01916         JR NC,EX4
                01917 EX5:
0756  7E        01918         LD A,(HL)                       ;LOAD HL WITH THE JUMP
0757  23        01919         INC HL                          ;ADDRESS FROM THE TABLE
0758  6E        01920         LD L,(HL)
0759  E67F      01921         AND 7FH                         ;MASK OFF BIT 7
075B  67        01922         LD H,A
075C  F1        01923         POP AF                          ;CLEAN UP THE GABAGE
075D  E9        01924         JP (HL)                         ;AND WE GO DO IT
                01925 ;-------------------------------------------------------------------------------
                01926 ;///////////////////////////////////////////////////////////////////////////////
                01927 ;-------------------------------------------------------------------------------
                01928 ;COMPUTER SPECIFIC ROUTINES.
                01929 ;-------------------------------------------------------------------------------
                01930 SERIAL_INIT:
                01931 
                01932     ; This routine is for initializing your serial port.
                01933 
                01934 ;-- Z80-FPGA: No necesitamos inicializar nada del puerto serie
                01935 
075E  C9        01936         RET
                01937 ;-------------------------------------------------------------------------------
                01938 TX_RDY:
                01939     ; This routine is checking if the Serial Port is ready to send
                01940     ; a character.
                01941 
                01942     ;-- Leer registro de estaus de la UART
                01943     ;-- Se puede enviar?
                01944 ;    IN A, (SERIAL_STATUS)
                01945 ;    AND 0x01
                01946 ;    JP NZ, TX_RDY ;-- No--> Esperar
075F  C9        01947     RET
                01948     ;-- Listo para transmitir
                01949 
                01950 ;-------------------------------------------------------------------------------
                01951 RX_RDY:
                01952 
                01953     ; This routine is for checking if a character is available over
                01954     ; serial. If a character is available, it returns to the calling
                01955     ; function with the character in 'A' and the Z-flag reset.
                01956     ; However, if a character is not available, it returns with the
                01957     ; Z-flag set.
                01958 
                01959     ;-- Comprobar si hay caracter disponible
0760  DB02      01960     in A, (SERIAL_STATUS)
0762  E602      01961     and 02H
0764  2803      01962     jr z, no_char ;-- No hay
                01963 
                01964     ;-- Leer el caracter que ha llegado
0766  DB01      01965     in A, (SerialPort)
                01966 
                01967     ;-- Retornar. A contiene el caracter recibido
                01968     ;-- Z debe ser 0
0768  C9        01969     RET
                01970 
                01971 no_char:
                01972     ;-- No hay caracter disponible
                01973     ;-- Poner Z a uno
0769  BF        01974     CP A
076A  C9        01975     ret
                01976 
076B  C9        01977         RET
                01978 ;-------------------------------------------------------------------------------
                01979 ;///////////////////////////////////////////////////////////////////////////////
                01980 ;-------------------------------------------------------------------------------
                01981 
                01982 LSTROM:                                 ;ALL ABOVE CAN BE ROM
                01983                     ;HERE DOWN MUST BE RAM
                01984         ORG  0800H
0800  00        01985         DB   0000H
                01986         ORG  0F00H ; Last 256 bytes of RAM
0F00            01987 VARBGN: DS   55                         ;VARIABLE @(0)
0F37            01988 BUFFER: DS   64                         ;INPUT BUFFER
0F77            01989 BUFEND: DS   1                          ;BUFFER ENDS
0F78            01990 STKLMT: DS   1                          ;TOP LIMIT FOR STACK
                01991         END


ABS             042D  AHOW            009E  ASORRY          04D0  
AWHAT           04A3  BKSP            0008  BUFEND          0F77  
BUFFER          0F37  CHGSGN          0462  CHKIO           0645  
CHKIO2          0660  CHKSGN          045F  CI1             0665  
CK1             047A  CKHLDE          0474  CR              000D  
CRLF            000E  CS              000C  CTRLC           0003  
CTRLG           0007  CTRLO           000F  CTRLQ           0011  
CTRLR           0012  CTRLS           0013  CTRLU           0015  
CURRNT          0801  DEFLT           0305  DEL             007F  
DIRECT          0733  DIVIDE          0443  DV1             044E  
DV2             0450  ENDCHK          049E  ERROR_ROUTINE   04A6  
ESC             001B  EX0             0736  EX1             0738  
EX2             0748  EX3             0750  EX4             0752  
EX5             0756  EXEC            0736  EXPR1           0313  
EXPR2           0357  EXPR3           0389  EXPR4           03E4  
FI1             0496  FI2             049D  FIN             048F  
FL1             0512  FL2             0526  FNDLN           050A  
FNDLP           0512  FNDNXT          0525  FNDSKP          0527  
FOR             01EB  FR1             01FB  FR2             0205  
FR3             0208  FR4             020B  FR5             020E  
FR7             0223  FR8             0241  GETLN           04D5  
GL1             04D9  GL3             04F8  GL4             0503  
GOSUB           01B2  GOTO            015B  HOW             00A4  
IFF             02A0  INIT            0606  INPERR          02AF  
INPUT           02B9  IP1             02B9  IP2             02C4  
IP3             02D4  IP4             02FE  IP5             0304  
LET             030A  LF              000A  LIST            0169  
LOPINC          080B  LOPLMT          080D  LOPLN           080F  
LOPPT           0811  LOPVAR          0809  LS1             0172  
LSTROM          076C  LT1             0312  MD1             05BD  
MSG1            066B  MSG2            068C  MVDOWN          05B5  
MVUP            05AD  NEW             012D  NEXT            0246  
NMI66           0066  NO_CHAR         0769  NX0             024D  
NX1             0285  NX2             0298  NX3             0263  
NX4             0275  NX5             0296  OCSW            0800  
OK              00A9  OUTC            0632  OUTC2           0636  
PARN            03F8  PATLOP          0610  PN1             0569  
PN2             0570  PN3             057E  PN4             057F  
PN5             058A  PN6             0590  POPA            05C3  
PP1             05DC  PR0             0192  PR1             0199  
PR2             018A  PR3             019E  PR6             01A6  
PR8             01AA  PRINT           0180  PRTLN           059A  
PRTNUM          055E  PRTSTG          052F  PS1             0530  
PU1             0603  PUSHA           05DE  QHOW            009D  
QSORRY          04CF  QT1             053F  QT2             0548  
QT3             054C  QT4             0553  QT5             055D  
QTSTG           053A  QWHAT           04A2  RA1             041D  
RANPNT          0813  REM             029C  RETURN          01D2  
RND             0403  RST08           0008  RST10           0010  
RST18           0018  RST20           0020  RST28           0028  
RST30           0030  RST38           0038  RSTART          00B8  
RUN             013C  RUNNXL          0142  RUNSML          0152  
RUNTSL          014B  RX_RDY          0760  SERIALPORT      0001  
SERIAL_INIT     075E  SERIAL_STATUS   0002  SETVAL          047C  
SIZE            0436  SORRY           00B2  SPACE           0020  
SS1             0028  ST1             00BB  ST2             00CB  
ST3             00D4  ST4             0108  STACK           0FFF  
START           0000  STKGOS          0803  STKINP          0807  
STKLMT          0F78  STOP            0136  SUBDE           0458  
SV1             048C  TAB             0009  TAB1            06A9  
TAB2            06B9  TAB4            06FD  TAB5            070F  
TAB6            0715  TAB8            071D  TC1             0068  
TC2             0072  TN1             007B  TSTNUM          0076  
TV1             0056  TXTBGN          0817  TXTEND          0F00  
TXTUNF          0815  TX_RDY          075F  VARBGN          0F00  
VARNXT          0805  WHAT            00AC  XP11            0319  
XP12            031F  XP13            0325  XP14            032C  
XP15            0334  XP16            033A  XP17            0340  
XP18            0342  XP21            035F  XP22            0362  
XP23            0365  XP24            036C  XP25            037D  
XP26            0380  XP31            038C  XP32            03A8  
XP33            03AF  XP34            03B8  XP35            03D7  
XP40            03EA  XP41            03F2  XP42            03FF  
XP43            0400  
